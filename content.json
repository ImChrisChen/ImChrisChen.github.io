{"meta":{"title":"Yo Man!","subtitle":null,"description":null,"author":"ChrisChen","url":"https://ImChrisChen.Github.io","root":"/"},"pages":[{"title":"tags","date":"2019-06-11T10:40:19.000Z","updated":"2021-05-18T15:53:59.392Z","comments":true,"path":"tags/index.html","permalink":"https://ImChrisChen.Github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-06-12T03:06:06.000Z","updated":"2021-05-18T15:53:59.392Z","comments":true,"path":"categories/index.html","permalink":"https://ImChrisChen.Github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"配置vim下nginx语法高亮","slug":"配置vim下nginx语法高亮","date":"2021-06-25T05:31:37.000Z","updated":"2021-06-25T05:47:45.262Z","comments":true,"path":"2021/06/25/配置vim下nginx语法高亮/","link":"","permalink":"https://ImChrisChen.Github.io/2021/06/25/配置vim下nginx语法高亮/","excerpt":"","text":"下载vim高亮语法配置cd ~/.vim/syntax/wget http://www.vim.org/scripts/download_script.php?src_id=14376 -O nginx.vim 修改filetype.vim 配置在 ~/.vim/filetype.vim 文件中添加如下配置 &quot; nginx au BufNewFile,BufRead /usr/local/etc/nginx setf nginx /usr/local/etc/nginx 为你的nginx路径","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://ImChrisChen.Github.io/tags/nginx/"},{"name":"配置","slug":"配置","permalink":"https://ImChrisChen.Github.io/tags/配置/"}]},{"title":"Vue 自定义指令封装数据埋点🐛","slug":"Vue-自定义指令封装数据埋点","date":"2021-06-21T07:57:39.000Z","updated":"2021-06-21T13:11:18.389Z","comments":true,"path":"2021/06/21/Vue-自定义指令封装数据埋点/","link":"","permalink":"https://ImChrisChen.Github.io/2021/06/21/Vue-自定义指令封装数据埋点/","excerpt":"","text":"最小化实现最小化实现 ，inserted, 和bind的区别可以取官网看，不同的使用场景 Vue.directive('collect', &#123; inserted (el,bindbing) &#123; // 执行自定义指令要做的操作 &#125;&#125;); collect 表示自定义指令的名称 bindbing.name close_vip 这部分表示自定义指令的参数 bindbing.arg .click .stop 表示修饰符 binding.modifiers.click, binding.modifiers.stop {title: &quot;关闭弹窗&quot;} 这部分表示 自定义指令的值. binding.value Vue自定义指令设计Vue自定义指令其实就是html 的属性，通过给 Vue自定义指令也是 html属性的一种语法糖，所以自定义其实就是通过 html 标签属性的形式，通过一系列规则的封装成的一些特定功能，下面看看如何实现 实现自定义指令需要弄明白一下几个问题。 自定义指令使用的使用的多种方法，name，修饰符等等 自定义指令插件化开发，如何解耦合？ 自定义指令编写import &#123; dw &#125; from '@/utils';export class Collect &#123; inserted(el, binding) &#123; let &#123; value, arg, modifiers &#125; = binding; let &#123; click, show, prevent, stop &#125; = modifiers; // 自定义修饰符 if (show) &#123; dw.onEvent(arg, value); &#125; if (click) &#123; el.addEventListener('click', event =&gt; &#123; stop &amp;&amp; event.stopPropagation(); prevent &amp;&amp; event.preventDefault(); dw.onEvent(arg, value); &#125;, false); &#125; &#125; bind() &#123; &#125; unbind(el, bingding) &#123; const &#123; click = false &#125; = bingding.modifiers; const &#123; value &#125; = bingding; if (click) &#123; el.removeEventListener('click',() =&gt; &#123; COLLECT(value); &#125;,false); &#125; &#125; // 导出的模块一定要有一个静态的 install的方法， Vue.use(module) 会执行到 static install(Vue) &#123; console.log('执行安装'); Vue.directive('vascollect', new Collect()); // 这里也可以写成对象的形式 &#125;&#125; 使用Vue.use安装使用Vue.use的形式使用，使其Vue项目更加规范化 main.js import Vue from 'vue'import Collect from '@/directives/collect'; // 自定义指令Vue.use(Collect) // 注册自定义指令 使用通过collect点击时上报 数据埋点事件 &lt;button v-collect:close_vip.click.stop=&quot;&#123; title: &quot;关闭弹窗&quot;&#125; &quot;&gt;Submit&lt;/button&gt;","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"},{"name":"代码片段","slug":"代码片段","permalink":"https://ImChrisChen.Github.io/tags/代码片段/"}]},{"title":"cookie和session","slug":"cookie和session","date":"2021-05-29T07:49:50.000Z","updated":"2021-06-12T06:59:21.096Z","comments":true,"path":"2021/05/29/cookie和session/","link":"","permalink":"https://ImChrisChen.Github.io/2021/05/29/cookie和session/","excerpt":"","text":"CookieCookie是在服务端返回数据的时候通过Set-Cookie这个header 设置到浏览器里面的一个内容，浏览器保存之后，在下一次同域的请求中，就会带上Cookie，这样就可以在一个用户的会话过程中，可以返回对应的用户的数据 Cookie有几个特点 通过Set-Cookie 设置 下次请求会自动带上 键值对的形式，可以设置多个 Cookie的属性 通过max-age 和 expires 设置过期时间 Secure 只在 https 请求时发送 设置 HttpOnly 后 无法通过 document.cookie 访问 无法通过Javascript 去访问到，这样做是为了安全性，预防 CSRF 攻击 ( 跨站请求伪造 ) ，通过使用脚本注入，或者外部链接跳转等方式, 获取用户的登录信息token 从而达到入侵的目的，HttpOnly 禁止Javascript访问 cookie 可以很好的预防这类攻击 Nginx 设置 Cookie 下面设置代表了看，设置了多个Cookie server &#123; add_header Set-Cookie \"id=1;max-age=3\"; add_header Set-Cookie \"name=chris\"; add_header Set-Cookie \"age=18;HttpOnly\";&#125; 第一条 id=123的这条Cookie 过期时间为 3秒后 第二条cookie 则没有设置过期时间，默认为浏览器关闭，会话结束（会话Cookie） 第三条cookie 设置了HttpOnly 字段，在浏览器的Application 中是可以看到的，但是用document.cookie 访问不了 tips: 可以通过给主域名设置Cookie 然后子域名访问，达到一个跨域访问Cookie的效果","categories":[{"name":"web安全","slug":"web安全","permalink":"https://ImChrisChen.Github.io/categories/web安全/"}],"tags":[{"name":"浏览器","slug":"浏览器","permalink":"https://ImChrisChen.Github.io/tags/浏览器/"},{"name":"服务器","slug":"服务器","permalink":"https://ImChrisChen.Github.io/tags/服务器/"}]},{"title":"记录这几天面试回答得不算很好的问题😮‍💨「 持续更新 」","slug":"记录这几天面试没有回答上来的问题","date":"2021-05-26T12:34:59.000Z","updated":"2021-06-12T06:59:21.098Z","comments":true,"path":"2021/05/26/记录这几天面试没有回答上来的问题/","link":"","permalink":"https://ImChrisChen.Github.io/2021/05/26/记录这几天面试没有回答上来的问题/","excerpt":"","text":"前言找工作第三天了，线上线下面了有不少了 ，其中有部分的问题回答的不是很nice，用这篇文章来记录一下，再去剖析一番 HTML&lt;script&gt; ,&lt;script async&gt; &lt;script defer&gt; 的区别分别是什么 在HTML中类似 async 和 defer，checked 等等 这种叫做 布尔属性，布尔属性的存在意味着 true 值，布尔属性的缺失意味着 false 值。 当时不太了解 defer这个属性，现在做个对比 &lt;script&gt;不管是内部代码，还是 src 加载的远程代码，都会阻塞 DOM 的解析 &lt;script async&gt; （多个请求加载时顺序不能保证一致） 内部代码：会阻塞 DOM 解析 远程代码：请求时不会阻塞， 执行代码时会阻塞 &lt;script defer&gt; 无论何时都不阻塞代码，触发 DOMContentLoaded 事件前执行 script标签 JS执行顺序 是否阻塞解析 DOM &lt;script&gt; HTML 中的顺序 阻塞 &lt;script async&gt; 网络请求返回顺序 有代码执行阻塞，没代码执行不阻塞 &lt;script defer&gt; 在HTML 中的顺序 不阻塞 CSS哪些属性可以触发BFC ？当时说了一些没太说清楚 列下几个常用的 浮动元素： float 不为 none 绝对定位元素： position 为 absolute 或 fixed 行内快元素：display 属性为 inline-block 表格单元格为 table-cell 值 （table的默认值） rem 如何计算 ？移动端没追问太多，移动端项目少 rem 是一个相对单位 layout-viewport (布局视口) / 设计稿宽度 document.body.clientWidth / 750 * 基数 = Html fontSize (function () &#123; var a = document.documentElement.clientWidth || document.body.clientWidth; if (a &gt; 460) &#123; // 最大460宽度 a = 460; &#125; else &#123; if (a &lt; 320) &#123; // 最小320宽度 a = 320; &#125; &#125; document.documentElement.style.fontSize = (a / 750 * 100) + 'px';&#125;)(); 不过移动端适配都有方案处理好了，postcss-px2rem等 JavascriptJavascript实现帧动画 ？当时一时没反应过来😢，后来才想起，不过这个API用的比较少 window.requestAnimationFrame(callback) 它接受一个回调函数，该方法会在浏览器在下次重绘之前调用指定的回调函数更新动画 该回调函数执行次数通常是每秒60次，但是在大多数浏览器中进行了优化，运行在后台标签页中或者是 &lt;iframe/&gt; 中会被暂停调用 详细参考 👉🏻 window.requestAnimationFrame - Web API 接口参考 | MDN (mozilla.org) try 中写异步代码报错了，catch 中是否能捕获到？ 为什么？​ 不能，因为JavaScript事件循环机制导致的 try &#123; setTimeout(() =&gt; &#123; throw new Error('1') &#125;)&#125; catch (e) &#123; console.log(e)&#125; 在上面这段代码中，并不能捕获到错误，可以复制在浏览器控制台中去试试。 其原因就是在JavaScript的执行过程中，执行到第二行的时候（setTimeout这个位置），会把setTimeout中的回掉函数放入 任务队列，等到同步代码执行完成后，才回去执行队列中的任务，所以在 try 代码块执行完后，程序此时还没有报错，于是就不会走到 catch 里面，所以setTimeout 其实是最后才执行的，所以不会被捕获到，如下图 👎🏻 Promise这个后面单独写一篇博客，这个问的太多了 generator 的 迭代器中 next方法的参数怎么用？next 的参数会在generator 函数中用作 yield 值返回的结果（只在函数体里有效，不会影响到next.value的值） 使用值调用next。 注意，第一次调用没有记录任何内容，因为生成器最初没有产生任何结果。 function* generator() &#123; while(true) &#123; var value = yield null; console.log(value); &#125;&#125;let g = generator();g.next(1); // \"&#123; value: null, done: false &#125;\"g.next(2);// 2// \"&#123; value: null, done: false &#125;\" 解释一下JavaScript的同步异步，宏任务和微任务 ？HTTPhttp哪些头可以设置强缓存和协商缓存？强缓存 ( 不会发起请求 ) Cache-Control Expires （过期时间） 协商缓存 （发起请求校验，如果命中缓存则返回304） Last-Modified / If-Modified-Since （都是GMT格式的时间字符串，如何客户端和服务端时间不统一，可能会存在问题） Etag / If-None-Match （值由服务器生成唯一标识，如果文件有变化，这个值也会改变） Etag 就是为了解决，Last-Modified 可能会存在时间不一致的另一种策略。 优先级： Cache-Control &gt; Expires &gt; Etag &gt; Last-Modified Cookie 中 httpOnly 的作用是什么 ？预防CSRF （跨站请求伪造）攻击，设置后的cookie字段，则通过JavaScript 访问不到（document.cookie）也就操作不了 从根本上解决问题😂 但是可以通过浏览器调试工具Application 这一栏看到 CORS中预检请求中（Prefilight request）的作用是什么 ？个人理解：在发送一些不安全的请求之前，浏览器会自动的发送一个options请求，也是就 CORS 预检请求，从而获取服务端是否允许该跨域的请求，以及是否需要携带身份凭证，最终决定客户端是否能否跨域访问资源，来保障网站的安全 那么什么样的情况下不会触发呢？MDN把这些归类为简单请求（不会触发CORS 预检请求 ） 使用下列方法之一： GET HEAD POST 除了被用户代理自动设置的首部字段（例如 Connection，User-Agent）和在 Fetch 规范中定义为 禁用首部名称 的其他首部，允许人为设置的字段为 Fetch 规范定义的 对 CORS 安全的首部字段集合，该集合为： Accept Accept-Language Content-Language Content-Type （需要注意额外的限制） DPR Downlink Save-Data Viewport-Width Width Content-Type的值仅限于下列三者之一：（也就是html原生 form表单支持的数据类型） text/plain multipart/form-data application/x-www-form-urlencoded 请求中的任意XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。 请求中没有使用 ReadableStream Vuecomputed 和 watch的区别 ？computed 只要有依赖的项更新了，就会重新计算，内部还有做缓存，去做对比，如果值上一次计算的值，和更新的值没有发生变化，也不会更新到页面上（适合在模版里面使用，减少DOM更新） watch 只要是被监听的值有变化，就会立刻执行 （适合做数据的监听的逻辑处理） Reactclass中哪些操作可以触发到 render ？ state更新 props更新 class的父组件更新，子组件也会更新 setState() 啥也不设置也会更新（只要调用了setState就会更新） setState 是同步还是异步 ？ 内部机制 ？是异步的，执行setState 后不会立刻更新，而是把要更新的操作放入一个队列中 React 的事件操作 和 原生事件有什么区别 ？ 合成事件 ？HOC 高阶组件是什么 ？作用是什么 ？ 高阶组件函数接收一个组件 作为参数 高阶组件必须输出一个新的组件 更好的做代码分层复用，解决耦合等问题 React中不用第三方库，如何组件通信？ （不用Mobx，Redux等） Props + 事件触发 （父子组件通信） 使用 ref 获取到对应React实例 直接操作其他组件的方法，属性，进行通信 Provide （ Mobx 也是使用从根组件开始注入的方式，实现状态下发 ） Context （不好维护） tips： 项目大起来还是用Redux 和 Mobx 库去管理比较好 Typescripttype 和 interface 的区别 ？说了一些，没说全，补充下 interface 可以描述class，type 不可以 interface 继承方式是 extends ，type 是用联合类型 &amp; interface 只能描述对象和 class ，type可以描述任意数据类型 （数据类型可以，class不行） interface 不能使用 in 关键字进行遍历，type 可以使用 [key in Types] 进行对象的key约束 keyof 如何使用 ？webpack说下webpack 的构建流程 ？ 合并配置文件和参数，生成最终的配置文件 （如何有多个的话，例如：shell 脚本中的参数，Vue.config.js 等等） 从入口文件开始（ entry字段），递归加载出所有依赖文件，生成依赖树 根据loader 配置的规则转化对应的文件 plugin … 代码提取，公共模块，代码分离，等等 生成文件写入 output 字段配置的文件夹 数据结构树节点操作的优化 ？堆栈是什么 ？说下深度优先和广度遍历优先 ？whlie 循环遍历做树结构的优化 ？笔试题手写一个 防抖函数当时直接写了思路，觉得在纸上写代码有点难受 /** * 防抖函数 * @param fn &#123;function&#125; * @param delay &#123;number&#125; * @return &#123;(function(...[*]): void)|*&#125; */function debounce(fn, delay) &#123; let timer = null; // 这里使用 普通函数，this可以执行到本身 return function (...args) &#123; // 如果有 timer 说明已经已经触发倒计时了,则清掉倒计时，重新定时 if (timer) &#123; clearTimeout(timer); &#125; // 倒计时开始， timer = setTimeout(() =&gt; &#123; fn.call(this, ...args); timer = null; &#125;, delay); &#125;;&#125; 还有算法的笔试题刚开始没看懂，后来他和解释了一波题意，然后马上就讲出思路来了，面试官表示比较满意，后来面试评价说我，反应灵活。。。😂，好吧 性能优化篇说一下你知道的web性能指标​ 当时脑子抽了，说了一些，没太全，实际上就是问的，从浏览器输入URL到页面渲染这个过程中的一些指标啊。。。😂 网络层 重定向时间 （浏览器先检查本地是否有标记过，该URL 有被永久的重定向 httpCode 301） DNS解析时间 （是域名的话，会递归的去解析拿到IP地址） TCP 完成握手时间 （拿到IP后，开始于服务器建立TCP连接，中间会有三次握手过程） HTTP请求响应时间 （三次握手成功后，HTTP开始发送请求，然后响应数据） 应用层 DOM解析时间 （获取到HTML后，浏览器开始解析） Script 脚本加载时间（ 如果DOM中包含了script，则会执行脚本） onload 时间 （整个页面加载完成后，包括DOM 和 CSS ，Javascript 全局加载完成，比如JS阻塞，Image 的src 图片下载完成才触发onload事件，亲测） pageload （页面完全加载是时间） PNG，JPG，GIF，WEBP等图片格式有什么不一样，分别用于哪些场景？","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"数据结构","slug":"数据结构","permalink":"https://ImChrisChen.Github.io/tags/数据结构/"},{"name":"HTTP","slug":"HTTP","permalink":"https://ImChrisChen.Github.io/tags/HTTP/"},{"name":"CSS","slug":"CSS","permalink":"https://ImChrisChen.Github.io/tags/CSS/"}]},{"title":"Object.defineProperty VS Proxy 以及在Vue3中的变化 ⚖️","slug":"Object-defineProperty和Proxy的区别","date":"2021-05-22T12:22:21.000Z","updated":"2021-05-23T14:38:32.302Z","comments":true,"path":"2021/05/22/Object-defineProperty和Proxy的区别/","link":"","permalink":"https://ImChrisChen.Github.io/2021/05/22/Object-defineProperty和Proxy的区别/","excerpt":"","text":"前言一提到 Object.defineProperty 搞前端的应该都会想起数据响应式，Vue2 数据响应式主要原理是通过的Object.defineProperty去实现的，Vue3是则使用浏览器原生的 Proxy 方法，同样是实现数据相应是，这两组API有什么不一样的吗？通过这篇文章给大家分析下👇🏻 Object.defineProperty VS ProxyObject.defineProperty 方法会在一个对象上定义一个新属性，或者修改一个对象的现有属性并返回对象 它提供了一些 约束对象操作的 属性 以及 set，get 方法，因此Object.defineProperty 监听的是对象中的属性，而和Proxy不同的是 new Proxy 时传入一个对象，它内部直接监听了整个对象的操作行为，因此可以得出一下结论： Object.defineProperty 监听的是对象的属性 Proxy 监听的是整个对象 由于Object.defineProperty 监听的是属性，当递归一个深层结构的对象的时候，数组里层的对象就不能遍历到了（因为Object.defineProperty方法不适用于数组) ，而Proxy能代理数组，所以从根源生解决了问题Object.defineProperty 代理的目标是对象上的属性，属性新增和删除也就监听不到了（handlers 中只有get，set方法） 以下方法在Object.defineProperty 中不能被监听到 push，pop，shift，unshift，sort，reverse，splice Object.defineProperty的缺陷，由上得出结论 Object.defineProperty 不能监听数组的增删改操作 Object.defineProperty 无法监听属性的新增和删除 Object.defineProperty 是对象的方法，因此只要有Javascript的地方它基本都能支持（IE9以下就不支持了） 而 Proxy 直接不支持 IE … Proxy作为新标准将受到浏览器厂商重点持续的性能优化 在Vue3中的变化 Vue2数据驱动是使用的Object.defineProperty 去递归监听对象的，Vue3则是用的 Proxy 代理 Vue2是一次性递归完data对象，Vue3 是用Proxy 是在调用属性时并且值时object时才递归 源码 vue-next/packages/reactivity/src/baseHandlers.ts 127行","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"}]},{"title":"HTTP 内容安全策略 - Content-Security-Policy","slug":"Http-内容安全策略-Content-Security-Policy","date":"2021-05-22T08:32:53.000Z","updated":"2021-06-12T06:59:21.095Z","comments":true,"path":"2021/05/22/Http-内容安全策略-Content-Security-Policy/","link":"","permalink":"https://ImChrisChen.Github.io/2021/05/22/Http-内容安全策略-Content-Security-Policy/","excerpt":"","text":"前言今天写下如何避免 XSS 跨站脚本攻击，以及CSP的使用 内容安全策略（CSP）是什么？内容安全策略是一个对Web网站的安全层，用于检测并削弱某些特定类型的攻击，数据注入攻击等，无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的攻击手段。 简单理解，CSP其实就是白名单制度，开发者明确告诉客户端，哪些资源可以被允许加载执行 CSP 大大增强了网页的安全性。攻击者即使发现了漏洞，也没法注入脚本，除非还控制了一台列入了白名单的可信主机。 CSP 被设计成完全向后兼容，老版本的CSP 字段为 X-Content-Security-Policy 默认为网页内容使用标准的同源策略。如果网站不提供 CSP 头部，浏览器也使用标准的同源策略。 下面说下 CSP 如何开启👇🏻 限制参数下面选项限制各类资源的加载，主要分为以下两种 default-scr 限制全局，所有根据链接加载的东西都会被限制（优先级最高） Content-Security-Policy: default-src 'self' #设置各项的默认值 制定资源类型 content-src 所有请求资源限制 ( HTTP ,WebSocket , EventSource 等) script-src 外部脚本 img-src 图片资源 style-src 外部CSS font-src 字体文件 worker-src worker脚本 frame-src 嵌入的外部资源（比如&lt;frame&gt;、&lt;iframe&gt;、&lt;embed&gt;和&lt;applet&gt;） manifest-src Manifest 文件 （WebApp） 其他限制 限制了一些其他的安全规范，也放在了CSP里面 block-all-mixed-content HTTPS 网页不得加载 HTTP 资源（浏览器已经默认开启） upgrade-insecure-requests 自动将网页上所有加载外部资源的 HTTP 链接换成 HTTPS 协议 plugin-types 限制可以使用的插件格式 sandbox 浏览器行为的限制，比如不能有弹出窗口等 上面资源类型一下比较通用的， 其中还包含 font-src，frame-src，media-src等等，只要是可以通过外链形式加载的几乎资源都可以被限制 参数选项每个选项可以设置一下这几项 主机名 chrisorz.cn https://chrisorz.cn:443 (指定端口) 路径 blog.chrisorz.cn/api/ 通配符 *.chrisorz.cn *://chrisorz.cn:* ( 所有协议，所有端口) 协议名 http: https: file: stp: 关键字 &quot;none&quot; 禁止加载任何外部资源 需要引号 &quot;self&quot; 当前域名，需要引号 通过参数和参数选项就可以实现整条完整的规则了 语法规则每个规则可以指定一个或者多个选限，如果有多个则用空格分开 每条规则用;结尾 例如: server &#123; Content-Security-Policy: \"img-src cdn.chrischen.top cdn.chrisorz.cn; script-src 'self'; style-src 'self'; \";&#125; 上面代码中，CSP做了如下配置 图片：只能信任 cdn.chrischen.top cdn.chrisorz.cn这两个域名加载的资源 脚本：只信任本域名下的脚本 样式：只信任本域名下的样式 开启CSP的两种方式 通过配置 HTTP 头信息的 Content-Security-Policy 字段 （服务器） server &#123; # 不能使用行内script只能从http或者https中使用外链 add_header \"Content-Security-Policy\" \"default-src http: https:\"; &#125; 写了个Demo，nginx上配置了 add_header &quot;Content-Security-Policy&quot; &quot;default-src http: https:&quot;后，可以看到内嵌式的script 代码已经不生效了，网页上没有任何的改变 同样CSS也是, 行内样式和内嵌样式都被拦截掉了 &lt;meta&gt; 标签设置 &lt;meta http-equiv=\"content-security-policy\" content=\"style-src http: https:\" charset=\"UTF-8\"&gt; &lt;meta/&gt;属性设置后也是一样的效果，这里就不贴图了 这里只是做一个演示效果，实际生产环境中一般不会这样设置 Content-Security-Polity ，生产环境中一般会有多域名，根据实际业务去进行可视化的配置，例如： 静态资源上CDN 注入百度统计，Google统计等脚本 后端多域名的API（微服务更甚之，可能一个项目调7，8个域名，不过可以通过通配符去解决） 等等 总结CSP 可以避免 XSS 攻击 CSP 的设置分为两种 客户端 meta 标签 服务端 响应头 无论是客户端，还是服务端设置，最终生效的CSP 安全策略是权限范围最小的那个","categories":[{"name":"web安全","slug":"web安全","permalink":"https://ImChrisChen.Github.io/categories/web安全/"}],"tags":[{"name":"Http","slug":"Http","permalink":"https://ImChrisChen.Github.io/tags/Http/"}]},{"title":"Vue3源码解读 - 响应式数据原理","slug":"Vue3源码解读-响应式数据原理","date":"2021-05-21T22:09:33.000Z","updated":"2021-06-21T08:06:01.719Z","comments":true,"path":"2021/05/22/Vue3源码解读-响应式数据原理/","link":"","permalink":"https://ImChrisChen.Github.io/2021/05/22/Vue3源码解读-响应式数据原理/","excerpt":"","text":"前言Vue3已经出来几个月了，API几天就上手了，想学习更深层次的东西还是的看看源码 从Vue创建实例开始Vue3创建实例是用的 Vue.createApp 方法，先去源码中找到 createApp，看看它做了如何处理 packages/vue/src/index.ts Vue包入口文件 -&gt; packages/runtime-dom/src/index.ts 57行 Vue.createApp做了啥？创建app实例通过 createRenderer 创建实例 调用createApp 方法生成 app 实例 定义 app.mount 方法在mount方法中，又做了以下几件事情 通过app.mount传入的selector，获取到DOM节点，用作Vue挂载的根节点 获取模版，如果createApp有传入 render,template,就使用它们作为模版，否则就使用根节点的innerHTML作为模版 调用mount 如果没有挂在过，开始挂载 在有在第一次渲染会走mount，以后更新都是走的patch对比 的逻辑 挂载成功后返回一个代理对象，里面包含了 data 和 setup方法return的值，如果两个方法的return的值有冲突，则会优先使用setup中的值 可以看到定义两个一样的 title 属性已经被覆盖了，而 hd 只在data中定义 setup中没有定义就不存在覆盖的问题，所以对于模版属性 setup的优先级是要高于data Vue3数据更新操作源码查找 packages/reactivity/src/reactive.ts 88行 定义reactive方法（用户调用执行） 使用new Proxy创建代理对象 createReactiveObject, get,set在 在get中收集依赖 未完待续。。。","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"}]},{"title":"http客户端get和post详解以及区别🧐","slug":"http中get和post的区别","date":"2021-05-20T19:46:59.000Z","updated":"2021-06-12T06:59:21.096Z","comments":true,"path":"2021/05/21/http中get和post的区别/","link":"","permalink":"https://ImChrisChen.Github.io/2021/05/21/http中get和post的区别/","excerpt":"","text":"前言这应该算是一个高频面试题了吧，来来输出一下… 什么是http，为何要使用它之类的就不讲了.. ​ 尽可能写详细点吧，不然一个表格就搞定了 区别语义不通最直观的就是语义不同了 说到语义，http客户端在当时设计这些API的时候（我没去参与设计过，我猜测的哈哈哈[狗头]），也是有一套规范的，当然这个规范不是强约束，你不按照这个语言规则来，你的程序也能跑 http不同方法代表的语义，分别对应来CURD的4个操作 RESUful API GET 在服务器检索某个资源 POST 在服务器创建资源 PUT 在服务器更改资源状态或对其进行更新 DELETE 在服务器删除某个资源 RESUful API 风格就是遵循的http的语义化去设计的 参数传递形式不一样GETGET请求的参数是拼接在URL后面的，通过 = &amp;符号进行分割 url?key1=value2&amp;key2=value2 例如: http://chrischen.top/api?id=10&amp;name=chris 服务端获取参数需要从 request中的 query 字段去获取 由于get参数都是明文显示，所以例如身份证号码，用户名密码，这类敏感信息是不应该用get去请求的 POSTpost请求的参数则会包含在请求体中，通常服务端用request中的 body字段去获取的， 而且发送post请求传递参数的内容格式（content-type）也是不一样的，既然聊到content-type，下面就多写点 在响应中: Content-Type标头告诉客户端实际返回的内容的内容类型。浏览器会在某些情况下进行MIME查找，并不一定遵循此标题的值; 为了防止这种行为，可以将标题 [X-Content-Type-Options] 设置为nosniff 在请求中: 在 post 或 put 请求，客户端告诉服务器实际发送的数据类型 通过content-type去设置发送的数据类型 常用的POST/PUT请求数据类型 更多 请求类型响应类型具体可参考 👉🏻 MIME 类型 - HTTP | MDN (mozilla.org) // &#123;id:123,name:'chris'&#125;Content-Type: application/json; // id=123&amp;name=chrisContent-Type: application/x-www-form-urlencoded; 幂等​ GET请求是幂等的，POST请求不幂等 什么是幂等？一个HTTP方法是幂等的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外) 下面几种方法是幂等 GET HEAD PUT DELETE 未完待续。。。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://ImChrisChen.Github.io/categories/计算机网络/"}],"tags":[{"name":"Http","slug":"Http","permalink":"https://ImChrisChen.Github.io/tags/Http/"}]},{"title":"JavaScript实现一个链表😼 - 数据结构","slug":"JavaScript实现一个链表-数据结构","date":"2021-05-20T06:10:45.000Z","updated":"2021-05-22T20:39:28.988Z","comments":true,"path":"2021/05/20/JavaScript实现一个链表-数据结构/","link":"","permalink":"https://ImChrisChen.Github.io/2021/05/20/JavaScript实现一个链表-数据结构/","excerpt":"","text":"背景最近在找工作，然后看到boss直聘的论坛上，一个前端招聘者在抱怨招不到合适的人，面了一大堆人，工作2-3年的，用JavaScript实现一个链表都寥寥无几，都没有聊下去的欲望…. 所以在这了准备在写这篇博客，表明我实现过哈哈哈😂，抖个机灵，毕竟自己之前也是面试官，喜欢出一些开放型的题目去考察面试者，其实我看来这位面试官考察的这个问题，除了考察这个问题本身，更多的是看你的分析问题的能力，和抽象思维 下面就来分析下如何用JavaScript实现一个链表 链表是什么？线性表的链式存储表示的特点是用一组任意的存储单元存储线性表的数据元素（这组存储单元可以是连续的，也可以是不连续的）。因此，为了表示每个数据元素与其直接后继数据元素 之间的逻辑关系 上面是百度百科的解释，我画了一张图让大家更便于理解 如果用生活中的例子代替火车就是最抽象的例子 每一个节点包含自己外，还包含一个指针，这个指针可以指向到下一个节点，形成一种，以此类推，形成的一个链式结构，就叫链表 链表还分为 单向链表 每个节点包含一个指针，指向下一个节点 双向链表 每一个节点有两个指针，一个指向上一个节点，一个指向到下一个节点 循环链表 把单向链表的最后一个指针从Null改成指向链表头，就形成了循环链表 知道链表是什么后，下面来分析一下如何用JavaScript实现一个单链表 JavaScript如何实现链表？首先，链表是基于一个个节点来组装实现的，首先我们需要创建一个辅助类来实现 其次，由于JavaScript没有指针的概念，我们在实现节点的时候需要用对象的属性去模拟指针 然后，我们要知道链表都有哪些API，如何去操作链表，然后再去逐步的实现这些方法 最后整理出来需要哪些功能 实现辅助类 Node，模拟链表中的节点 节点属性的：本书节点 节点的属性：next指向 链表类的API getHeader 获取链表头 append 向链表中追加元素 insert 向链表中的某一个位置插入元素 removeAt 删除链表中的某一个元素 indexOf 查询链表中是否有这个元素 捋清楚这个整体思路后，下面按照这个大纲来实现 Node辅助类实现class Node &#123; constructor(item) &#123; this.item = item; // 节点内容 this.next = null; // 指向下一个节点的指针 &#125;&#125; 链表类的实现class LinkedList &#123; head = null; length = 0&#125; appendclass ListedList &#123; head = null; // 链表头 length = 0 // 链表长度 /** * 追加节点 * @param item &#123; Node &#125; 节点 */ append(item) &#123; let node = new Node(item); // 创建一个节点 if (this.head) &#123; // 有head头则遍历到获取到最后一个节点，把next指向新追加的节点 let current = this.head; while (current.next) &#123; current = current.next; &#125; current.next = node; &#125; else &#123; // 无head头，则直接把head头替换为新的节点 this.head = node; &#125; // 追加成功后，链表的长度加一 this.length++; &#125;&#125; insertclass LinkedList &#123; /** * 向链表中的某一个位置插入元素 * @param position &#123; Number &#125; * @param item &#123; Node &#125; */ insert(position, item) &#123; // 边界判断 , 防止 position 越界 if (position &gt; -1 &amp;&amp; position &lt; this.length) &#123; let node = new Node(item); // 创建一个节点 // 插入的位置是head头前面 if (position === 0) &#123; let current = this.head; this.head = node; // 把head替换为新节点 node.next = current; // 把新节点的next指向原来的head节点 &#125; else &#123; /** * 其他位置，则需要遍历链表获取到对应到插入的位置 * 思路: 1. 通过positon获取到上一个节点和下一个节点 * 2. 把上一个节点的next指向到新节点 * 3. 把新节点的next指向到下一个节点 */ let index = 0; let previous = null; let current = this.head; while (index &lt; position) &#123; previous = current; current = current.next; index++; &#125; previous.next = node; node.next = current; &#125; this.length++; // 插入成功后，链表的长度加1 &#125; else &#123; console.warn('position的值越界了'); &#125; &#125;&#125; removeAt/** * 通过位置删除节点 * @param position */class LinkedList &#123; removeAt(position) &#123; /** * 思路: * 1. 通过position 遍历链表和 找到上一个元素和当前元素 * 2. 把上一个元素的next指向到当前元素的next (也就是当前元素的下一个元素) */ // postion越界判断,保证传入的位置是正确的 if (position &gt; -1 &amp;&amp; position &lt; this.length) &#123; if (position === 0) &#123; let current = this.head; this.head = current.next; &#125; else &#123; let &#123; current, previous &#125; = this.#getPrevAndCurrentNode(position); previous.next = current.next; &#125; &#125; else &#123; console.warn('position的值越界了'); &#125; this.length--; // remove掉后，链表长度减1 &#125;&#125; indexOf/** * 通过节点找到 position * @param item &#123; Node &#125; * @return &#123; number &#125; */class LinkedList &#123; indexOf(item) &#123; let index = 0; let current = this.head; while (current.next) &#123; current = current.next; if (current === item) &#123; break; &#125; else &#123; index++; &#125; &#125; return index &#125;&#125; getHeadclass LinkedList &#123; getHead() &#123; return this.head; &#125;&#125; 代码优化 &amp;&amp; 完成例子从上面我们观察到，insert，和removeAt这两个方法都用到了position 去获取上一个元素和当前元素，那么我们可以把这方法抽离出来进行一个代码结构的优化，下面给大家展示一下完整的例子 /** * Created by WebStorm. * User: chrischen * Date: 2021/3/18 * Time: 11:50 下午 *//** * 节点类 */class Node &#123; /** * @param item &#123; Node &#125; */ constructor(item) &#123; this.item = item; this.next = null; &#125;&#125;/** * 链表类 */export class LinkedList &#123; head = null; length = 0; /** * 追加节点 * @param item &#123; Node &#125; 节点 */ append(item) &#123; let node = new Node(item); // 创建一个节点 if (this.head) &#123; // 有head头则遍历到获取到最后一个节点，把next指向新追加的节点 let current = this.head; while (current.next) &#123; current = current.next; &#125; current.next = node; &#125; else &#123; // 无head头，则直接把head头替换为新的节点 this.head = node; &#125; // 追加成功后，链表的长度加1 this.length++; &#125; /** * 向链表中的某一个位置插入 节点 * @param position &#123; number &#125; * @param item &#123; Node &#125; */ insert(position, item) &#123; // 边界判断 , 防止 position 越界 if (position &gt; -1 &amp;&amp; position &lt; this.length) &#123; let node = new Node(item); // 创建一个节点 // 插入的位置是head头前面 if (position === 0) &#123; let current = this.head; this.head = node; // 把head替换为新节点 node.next = current; // 把新节点的next指向原来的head节点 &#125; else &#123; // 其他位置，则需要遍历链表获取到对应到插入的位置 /** * 思路: * 1. 通过positon获取到上一个节点和当前节点 * 2. 把上一个节点的next指向到新节点 * 3. 把新节点的next指向到当前节点 (插入后就是新节点的下一个节点了) */ let &#123; current, previous &#125; = this.#getPrevAndCurrentNode(position); let node = new Node(item); previous.next = node; node.next = current; &#125; this.length++; // 插入成功后，链表的长度加1 &#125; else &#123; console.warn('position的值越界了'); &#125; &#125; /** * 通过positon获取上一个节点和当前节点 * @param position &#123; number &#125; * @return &#123; &#123; current, previous &#125; | undefined &#125; */ #getPrevAndCurrentNode(position) &#123; // #表示私有变量esnext新标准 let index = 0; let current; let previous; if (!this.length &gt; 0) &#123; console.warn('当前为空'); return undefined; &#125; if (position &gt; -1 &amp;&amp; position &lt; this.length) &#123; let current = 0; if (position === 0) &#123; previous = null; current = this.head; &#125; else &#123; let current = this.head; while (index &lt; position) &#123; previous = current; current = current.next; &#125; &#125; &#125; else &#123; console.error(`position的值 \"$&#123; position &#125;\" 不符合规范`); &#125; return &#123; current, previous &#125;; &#125; /** * 通过位置删除节点 * @param position */ removeAt(position) &#123; /** * 思路: * 1. 通过position 遍历链表和 找到上一个节点和当前节点 * 2. 把上一个节点的next指向到当前节点的next (也就是当前节点的下一个节点) */ // postion越界判断,保证传入的位置是正确的 if (position &gt; -1 &amp;&amp; position &lt; this.length) &#123; if (position === 0) &#123; let current = this.head; this.head = current.next; &#125; else &#123; let &#123; current, previous &#125; = this.#getPrevAndCurrentNode(position); previous.next = current.next; &#125; &#125; else &#123; console.warn('position的值越界了'); &#125; this.length--; // remove掉后，链表长度减1 &#125; /** * 通过节点找到 position * @param item &#123; Node &#125; * @return &#123; number &#125; */ indexOf(item) &#123; let index = 0; let current = this.head; while (current.next) &#123; current = current.next; if (current === item) &#123; break; &#125; else &#123; index++; &#125; &#125; return index; &#125; /** * 获取链表头 * @return &#123; Node | null &#125; */ getHead() &#123; return this.head; &#125;&#125; 不到200行代码，就这样一个单向链表就实现了😂 最后最后说下我个人的理解，其实学习数据结构出了数据结构本身，更多的是学习一种解决问题的思维，能够举一反三，你知道的东西多了都熟悉了，才有能力去创新。 后面打算写一些非技术型的文章，输出下别的内容哈哈🤪","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://ImChrisChen.Github.io/categories/数据结构/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"数据结构","slug":"数据结构","permalink":"https://ImChrisChen.Github.io/tags/数据结构/"}]},{"title":"http协议发展历史和各版本之间的区别 📖","slug":"HTTP协议发展历史和各版本之前的区别 📖","date":"2021-05-18T22:22:32.000Z","updated":"2021-06-12T06:59:21.095Z","comments":true,"path":"2021/05/19/HTTP协议发展历史和各版本之前的区别 📖/","link":"","permalink":"https://ImChrisChen.Github.io/2021/05/19/HTTP协议发展历史和各版本之前的区别 📖/","excerpt":"","text":"前言HTTP是web编程最为基础的了知识了，有 互联网基石 的称号可想有多重要, 准备重新整理输出一篇博客，通过这种方式去加深印象 HTTP/0.9在最早的时候呢，第一个定稿http协议是http0.9，在这个版本的http协议非常简单 只有一个GET命令没有header等相关描述数据的信息服务器发送完毕，就关闭了TCP连接短连接，一个TCP只能发送一个HTTP请求 因此，为了解决这些特性带来的问题， 在后续的http1.1 就进行了升级，在同一个TCP连接中可以发送 多个请求，更快的提升了http的传输效率和服务性能HTTP/1.0新增了很多命令 POST，PUT，HEADER等 新增了status code等 header头相关信息 发送和请求数据的一些描述 新增了多字符集，多部分发送，权限，缓存等 有了这些东西后，能够更好的有利于的去实现web服务 HTTP/1.1 （目前应用最多最广泛）新增持久链接 keep-alive（ 默认开启 ） 在一个TCP连接中可以发送多个HTTP请求， 一个HTTP请求肯定是在在某个TCP连接中去发送的 keep-alive： 在HTTP1.1的升级最主要的是 keep-alive 持久链接 大大的减少了每次请求都要建立一次TCP连接带来的耗时，从而提升了HTTP请求性能，keep-alive 带来这么大性能提升的同时也也有他的缺点 当然keep-alive也有缺点： 就算是在空闲状态，它还是会消耗服务器资源，而且在重负载时，还有可能遭受 DoS attack 攻击。这种场景下，可以使用非长连接，即尽快关闭那些空闲的连接，也能对性能有所提升。 DOS攻击类型 带宽攻击 服务器请求泛滥 SYN 泛滥攻击 ICMP 泛滥攻击 点对点攻击 永久 DoS 攻击 应用层泛滥攻击 新增 pipeline ( 默认关闭 )HTTP流水线模型 ，服务端在多个连续的请求甚至都不用等待立即返回就可以被发送 ) 新增域名分片 （ 默认关闭，在HTTP2 中就没必要使用这个了，集成了更好的解决方案 ）作为 HTTP/1.x 的连接，请求是序列化的，哪怕本来是无序的，在没有足够庞大可用的带宽时，也无从优化。一个解决方案是，浏览器为每个域名建立多个连接，以实现并发请求。曾经默认的连接数量为 2 到 3 个，现在比较常用的并发连接数已经增加到 6 条。如果尝试大于这个数字，就有触发服务器 DoS 保护的风险。域名分片主要解决的就是这个问题 如果服务器端想要更快速的响应网站或应用程序的应答，它可以迫使客户端建立更多的连接。例如，不要在同一个域名下获取所有资源，假设有个域名是 www.example.com，我们可以把它拆分成好几个域名：www1.example.com、www2.example.com、www3.example.com。所有这些域名都指向同一台服务器，浏览器会同时为每个域名建立 6 条连接(在我们这个例子中，连接数会达到 18 条)。这一技术被称作域名分片。 HTTP/2 (未来的趋势，目前还没有普及)所有数据都是以二进制来进行传输 HTTP/2之前都是用的字符串进行传输 同一个连接中发送多个请求不再需要按照顺序来 HTTP/2之前都是通过串行请求来响应请求，有了这个功能后可以并行返回请求了 头信息压缩推送（服务端能够向客户端推送消息） 有了推送功能后，可以实现html/css/js 并行下载，而不是等到加载到html后，再解析DOM时再去加载css/js/image等资源文件","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://ImChrisChen.Github.io/categories/计算机网络/"}],"tags":[{"name":"Http","slug":"Http","permalink":"https://ImChrisChen.Github.io/tags/Http/"}]},{"title":"","slug":"JavaScript设计模式","date":"2021-05-18T15:53:59.385Z","updated":"2021-05-18T15:53:59.385Z","comments":true,"path":"2021/05/18/JavaScript设计模式/","link":"","permalink":"https://ImChrisChen.Github.io/2021/05/18/JavaScript设计模式/","excerpt":"","text":"JavaScript - 设计模式什么是设计模式作者的这个说明解释得挺好 假设有一个空房间，我们要日复一日地往里 面放一些东西。最简单的办法当然是把这些东西 直接扔进去，但是时间久了，就会发现很难从这 个房子里找到自己想要的东西，要调整某几样东 西的位置也不容易。所以在房间里做一些柜子也 许是个更好的选择，虽然柜子会增加我们的成 本，但它可以在维护阶段为我们带来好处。使用 这些柜子存放东西的规则，或许就是一种模 观察者模式 / 发布订阅模式装饰器模式/** * Created by WebStorm. * User: chrischen * Date: 2020/7/13 * Time: 10:49 下午 */class Math &#123; @log() add(a, b) &#123; return a + b; &#125;&#125;function log(target, name, descriptor) &#123; console.log(`target:$&#123; target &#125;, name: $&#123; name &#125;, descriptor: $&#123; descriptor &#125;`); let oldValue = descriptor.value; descriptor.value = function () &#123; console.log(`调用$&#123; name &#125;参数`, arguments); return oldValue.apply(target, arguments) &#125; return oldValue.apply(target, arguments);&#125;let math = new Math();math.add(1, 2); 单例模式","categories":[],"tags":[]},{"title":"MingleJS的设计理念以及功能介绍✨","slug":"MingleJS的设计理念以及效果展示","date":"2021-05-08T19:46:59.000Z","updated":"2021-06-22T03:19:11.429Z","comments":true,"path":"2021/05/09/MingleJS的设计理念以及效果展示/","link":"","permalink":"https://ImChrisChen.Github.io/2021/05/09/MingleJS的设计理念以及效果展示/","excerpt":"","text":"前言最近在找工作，把自己的以前做的项目梳理一下，于是找了几个比较有代表性的项目，分别由不用文章给大家介绍一下，这篇文章讲的是MingleJS，是我个人独立开发的一个项目，针对toB中后台系统组件化开发的一个解决方案，已在公司内部技术部内部推行使用。 下面分为几个板块来详细介绍一下它 What？ MingleJS是什么？ Why？ 为什么要开发这样一个东西，它解决了什么样的问题？ How？ 如何去使用它？ MingleJS 是什么？描述：融汇WUI的思想，实现的一套开箱即用的前端框架/组件库 面向用户：后端开发工程师【，全栈开发工程师 应用场景：toB 中后台系统 特点：无需打包编译等过程，直接在html中引入minglejs就能使用 功能：其内部集成了 Antd 组件库，组件提供了简易的API，以及交互规则，模版渲染，流程控制，循环列表等 创作背景 （为什么开发？）在上一家公司的技术部里，toB中后台系统的开发模式是前后端不分离，所有的内部后台系统的项目都是基于后端的项目中的，后端通过在模版里去调用前端的组件，配置几个参数，一个页面视图和交互就都构建好了（组件支持的相对较完善） 这套框架就是WUI，是公司自己的内部框架和组件库了，是一套以CommonJS + jQuery 实现的一套内部UI框架，组件规则里包含了交互逻辑， 入职后一直在它上面去做开发和维护，因为是以前的上古项目，维护异常痛苦，于是萌生出了把WUI重构的想法 然后就开始对框架的使用和一些组件/功能模块去进行剖析，用在了哪些系统，一些列边界情况的考虑等等，研究了好几天，因为代码做了太多的兼容处理，导致阅读起来成本巨高，我放弃了，于是准备自己重新写一套框架。保留和WUI同样的模式，让后端去使用前端的组件库，团队模式还是保持不变。 找我们老大聊之后，于是就开始了。 它解决了什么样的问题？ 由于团队中toB系统是前后端不分离的模式，后端MVC架构中的View这一层，需要前端去辅助实现，它提供了，开箱即用，无需打包编译的特点，后端直接在script中引入minglejs，就能在项目中去使用 几乎无需编写视图代码，真正实现配置化，还有配套可视化代码生成器，能够快速构建视图 项目展示 MingleJS 代码地址 https://github.com/ImChrisChen/MingleJS 基于MingleJS开发的可视化页面生成器 演示地址 👉🏻 可视化平台 功能介绍 模版解析 文本解析，属性解析, 拓展运算符 等 &lt;{var}&gt; 事件解析 @[event] 例如：@click=&quot;handleClick&quot; 流程控制 w-if w-else 循环数据 w-foreach 指令 w-readonly 等 有时间再补充， 未完待续。。","categories":[{"name":"设计模式","slug":"设计模式","permalink":"https://ImChrisChen.Github.io/categories/设计模式/"},{"name":"工程化","slug":"设计模式/工程化","permalink":"https://ImChrisChen.Github.io/categories/设计模式/工程化/"},{"name":"组件化","slug":"设计模式/工程化/组件化","permalink":"https://ImChrisChen.Github.io/categories/设计模式/工程化/组件化/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"WebComponents","slug":"WebComponents","permalink":"https://ImChrisChen.Github.io/tags/WebComponents/"},{"name":"Antd","slug":"Antd","permalink":"https://ImChrisChen.Github.io/tags/Antd/"},{"name":"Typescript","slug":"Typescript","permalink":"https://ImChrisChen.Github.io/tags/Typescript/"},{"name":"React","slug":"React","permalink":"https://ImChrisChen.Github.io/tags/React/"}]},{"title":"JS手写一个路由模块 🍊","slug":"JS手写一个路由模块","date":"2020-07-05T12:37:01.000Z","updated":"2021-05-18T15:53:59.384Z","comments":true,"path":"2020/07/05/JS手写一个路由模块/","link":"","permalink":"https://ImChrisChen.Github.io/2020/07/05/JS手写一个路由模块/","excerpt":"","text":"JS手写一个路由模块Hash 模式原理：通过 window.onhashchange监听到页面url地址的hash值变化，改变页面内容 实现要求：浏览器端自行可以实现，不用服务器端配置 本质上就是检测 url 的变化，截获 url 地址，然后解析来匹配路由规则。 这种 #。后面 hash 值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求，也就不会刷新页面。另外每次 hash 值的变化，还会触发 hashchange 这个事件，通过这个事件我们就可以知道 hash 值发生了哪些变化。 废话不多说直接上代码完成最小化实现 在线演示地址 html&lt;body&gt;&lt;a href=\"#/page1\"&gt;page1&lt;/a&gt;&lt;a href=\"#/page2\"&gt;page2&lt;/a&gt;&lt;a href=\"#/page3\"&gt;page3&lt;/a&gt;&lt;a href=\"#/page4\"&gt;page4&lt;/a&gt;&lt;div class=\"container\"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script src=\"./router.js\"&gt;&lt;/script&gt;&lt;script&gt; let container = document.querySelector('.container'); let router = window.__router__; router.route('/page1', function () &#123; container.innerHTML = 'page1'; &#125;) router.route('/page2', function () &#123; container.innerHTML = 'page2'; &#125;) router.route('/page3', function () &#123; container.innerHTML = 'page3'; &#125;) router.route('/page4', function () &#123; container.innerHTML = 'page4'; &#125;)&lt;/script&gt; router.jsclass Router &#123; routes = &#123;&#125;; constructor() &#123; // 监听hash值变化 window.addEventListener('hashchange', () =&gt; this._render()); window.addEventListener('load', () =&gt; this._render()); &#125; // 每次改变路由会执行注册路由触发的回调函数 _render() &#123; // location.hash \"#/page1\" let hash = location.hash.slice(1) || '/'; this.routes[hash] &amp;&amp; this.routes[hash](); &#125; // 注册路由 route(path, callback) &#123; this.routes[path] = callback &#125;&#125;window.__router__ = new Router(); HTML5 History 模式原理：xxx 14年后，因为HTML5标准发布。多了两个 API，pushState 和 replaceState，通过这两个 API 可以改变 url 地址且不会发送请求。同时还有 onpopstate 事件。通过这些就能用另一种方式来实现前端路由了，但原理都是跟 hash 实现相同的。用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。具体可以见： // TODO 未完待续","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"}]},{"title":"使用typescript%20编写一个npm模块","slug":"使用typescript 编写一个npm模块","date":"2020-06-26T04:15:50.000Z","updated":"2021-05-18T15:53:59.389Z","comments":true,"path":"2020/06/26/使用typescript 编写一个npm模块/","link":"","permalink":"https://ImChrisChen.Github.io/2020/06/26/使用typescript 编写一个npm模块/","excerpt":"","text":"Tips最近公司在推小游戏这块的业务，所以就有了这么一个需求，要求在oppo/vivo小游戏上，接入一套SDK给研发调用，主用于收集用户数据（注册，登录，游戏在线时常上报，等一系列用户行为记录），然后需在游戏项目（用的ts）中去编写代码，于是就有了这个想法，把SDK做成一个npm模块，以后维护这个模块就好了，便于维护和管理。 网上看了很多资料，最后总结出这篇文章，在这里谢谢各位大佬 1 . 初始化NPM包npm init -y // 初始化package.json 2 . 安装typescriptnpm install typescript -D 3 . 配置 tsconfig.jsontsc --init // 初始化tsconfig.json 修改配置为 &#123; \"compilerOptions\": &#123; \"target\": \"es5\", // 指定ECMAScript目标版本 \"module\": \"commonjs\", // 指定模块化类型 \"declaration\": true, // 生成 `.d.ts` 文件 \"outDir\": \"./dist\", // 编译后生成的文件目录 \"strict\": true // 开启严格的类型检测 &#125;&#125; 4 . 编写模块这里把之前写好的SDK模块拿过来 然后在跟目录下新建 index.ts 如下： 5 .","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"Typescript","slug":"Typescript","permalink":"https://ImChrisChen.Github.io/tags/Typescript/"},{"name":"NPM","slug":"NPM","permalink":"https://ImChrisChen.Github.io/tags/NPM/"}]},{"title":"npm && nrm 常用命令及npm 包部署","slug":"npm常用命令","date":"2020-05-24T14:08:38.000Z","updated":"2021-05-18T15:53:59.388Z","comments":true,"path":"2020/05/24/npm常用命令/","link":"","permalink":"https://ImChrisChen.Github.io/2020/05/24/npm常用命令/","excerpt":"","text":"NPM | NRM查看那些npm包可以更新npm -g outdated // 加上 -g 代表全局 global 查看当前用户npm whoami 更新npm模块安装npm-check-updates模块// 全局安装 npm-check-updatesnpm install -g npm-check-updates 检查可更新模块npm-check-updates//也可以使用简写ncu 模块更新ncu -u &amp;&amp; npm install//或者 npm update 模块名 查看全局包的位置npm root -g 发布 | 更新 npm模块npm publish 撤回已发布的npm包操作限制 根据规范，只有在发包的24小时内才允许撤销发布的包（ unpublish is only allowed with versions published in the last 24 hours） 即使你撤销了发布的包，发包的时候也不能再和被撤销的包的名称和版本重复了（即不能名称相同，版本相同，因为这两者构成的唯一标识已经被“占用”了） npm unpublish dalan_ui_pcnpm unpublish dalan_ui_pc --force 强制撤销 nrm 添加源nrm add dl_npm http://npm.superdalan.com/ npm自动更新版本号参考链接 https://blog.csdn.net/znyaiw/article/details/80199457 版本号递增规则：- 主版本号( major )：做了不兼容修改或颠覆式的重写- 次版本号( minor )：向下兼容的功能性新增- 修订号( patch )：向下兼容的问题修正 npm version patch -m '修复xxxx'","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"https://ImChrisChen.Github.io/tags/npm/"}]},{"title":"Vue-Router history模式的配置方法(nginx)及其原理🧐","slug":"Vue-Router history模式的配置方法(nginx)及其原理🧐","date":"2020-05-08T18:58:00.000Z","updated":"2021-05-22T20:39:28.988Z","comments":true,"path":"2020/05/09/Vue-Router history模式的配置方法(nginx)及其原理🧐/","link":"","permalink":"https://ImChrisChen.Github.io/2020/05/09/Vue-Router history模式的配置方法(nginx)及其原理🧐/","excerpt":"","text":"背景介绍自己在部署单页面应用(Single Page Applacation)的时候发现了一些问题 因为在很久以前 , 都是把项目打包好丢给后端or运维去部署,什么nginx配置，Jenkins配置，钩子，自动化脚本都不用管，直到有一天我在 KVM 机器 Linux上用 nginx 部署的时候，才发现一个问题… 为啥项目部署好后，一切都正常使用，但是一刷新就404了… 咋回事？？？为了弄懂其中原理. 于是就有了下面这篇文章 👇🏻 本文用Vue的项目进行举例 , React Angular 等其他支持 SPA 的框架同理 Vue路由模式要讲清楚这个问题，首先得从路由模式说起vue-router分为hash和history模式 hash模式 (vue-router默认模式)url的表现形式为http://blog.chrischen.top#home 这种方式有些缺点： 比较难看 使用location.search 获取不了query后面的参数 history模式url表现形式为 http://blog.chrischen.top/home history 模式 解决了hash模式上面的一些问题，同时还有其他的一些优点这里不细讲 history模式的区别，不然跑题了 但如果要使用history模式，我们需要在服务器上进行额外配置。本文将讨论如何配置以及为什么要这样配置。 history模式的配置方法首先要将mode设置为history： const router = new VueRouter(&#123; mode: 'history', routes: [...]&#125;) 然后设置后端（这里采用的nginx）： location / &#123; try_files $uri $uri/ /index.html;&#125; 然后就…… 没了！显然官方的教程讲的比较简略，并且我们参照这个教程实际上还是会遇到一些问题。 history模式的配置实践及原理只配置前端的情况首先，我们将mode设置为history，但不配置后端。然后，假如我们的路由是长这个样子的： const routes = [ &#123;path: '/home', component: Home&#125;, &#123;path: '/', redirect: '/home'&#125;]; 我们用nginx部署项目，然后在地址栏输入http://localhost:8080（这里配置的端口是8080），你会发现地址栏之后会变为http://localhost:8080/home，并且看起来一切正常，似乎路由也可以正常切换而不会发生其他问题（实际上会发生问题，后面会进行讨论）。看起来好像不需要按官网告诉我们的那样配置后端也能实现history模式，但如果你直接在地址栏输入http://localhost:8080/home，你会发现你获得了一个404页面。 那么http://localhost:8080为什么可以（部分）正常显示呢？道理其实很简单，你访问http://localhost:8080时，静态服务器（这里是nginx）会默认去目标目录（这里为location中root所指定的目录）下寻找index.html（这是nginx在端口后没有额外路径时的默认行为），目标目录下有这个文件吗？有！然后静态服务器返回给你这个文件，配合vue-router进行转发，自然可以（部分）正常显示。但如果直接访问http://localhost:8080/home，静态服务器会去目标目录下寻找home文件，目标目录下有这个文件吗？没有！所以自然就404了。 配置 Nginx为了达到直接访问http://localhost:8080/home也可以成功的目的，我们需要对后端（这里即nginx）进行一些配置。 首先想想，要怎样才能达到这个目的呢？ 在传统的hash模式中（http://localhost:8080#home），即使不需要配置，静态服务器始终会去寻找index.html并返回给我们，然后vue-router会获取#后面的字符作为参数，对前端页面进行变换。 类比一下，在history模式中，我们所想要的情况就是：输入http://localhost:8080/home，但最终返回的也是index.html，然后vue-router会获取home作为参数，对前端页面进行变换。那么在nginx中，谁能做到这件事呢？答案就是try_files。 大意就是它会按照try_files后面的参数依次去匹配root中对应的文件或文件夹。如果匹配到的是一个文件，那么将返回这个文件；如果匹配到的是一个文件夹，那么将返回这个文件夹中index指令指定的文件。最后一个uri参数将作为前面没有匹配到的fallback。（注意try_files指令至少需要两个参数） 拿我自己的网站举个例子： location / &#123; root /work/apps/blog.chrischen.top; index index.html; try_files $uri $uri/ /index.html;&#125; $uri是nginx中的变量，比如我访问的网址是http://localhost:8080/home，那么它就代表的/home。 在blog.chrischen.top这个目录中，没有子目录，只有一个index.html和一些压缩后的名称是hash值的.js文件。当我们请求http://localhost:8080/home这个地址时，首先查找有无home这个文件，没有；再查找有无home目录，也没有。所以最终会定位到第三个参数从而返回index.html，按照这个规则，所有路由里的url路径最后都会定位到index.html。vue-router再获取参数进行前端页面的变换，至此，我们已经可以通过http://localhost:8080/home这个地址进行成功地访问了。而$uri这个参数的作用其实是匹配那些.js文件用的，而$uri/在这个例子中并没有多大用，实际上是可以去掉的。 最后总结其原理就是用nginx把项目代理的SPA的根目录，并设置如果访问到其他不存在的页面,则会自己跳转到index.html页面，等于变相的把 blog.chrischen.top/home后面的部分不做处理，然后就可以通过前端路由匹配规则进行匹配","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"},{"name":"Nginx","slug":"Nginx","permalink":"https://ImChrisChen.Github.io/tags/Nginx/"}]},{"title":"本地环境局域网内 + Nginx实现Https😎","slug":"本地环境局域网内 + Nginx 实现Https","date":"2020-05-08T18:58:00.000Z","updated":"2021-05-22T20:39:28.990Z","comments":true,"path":"2020/05/09/本地环境局域网内 + Nginx 实现Https/","link":"","permalink":"https://ImChrisChen.Github.io/2020/05/09/本地环境局域网内 + Nginx 实现Https/","excerpt":"","text":"Nginx+Https配置TLS或传输层安全( transport layer security)，它的前身是SSL(安全套接字层secure sockets layer)，是Web协议用来包裹在一个受保护，加密封装正常通道。采用这种技术，服务器和客户端之间可以安全地进行交互，而不用担心消息将被拦截和读取。证书系统帮助用户在核实它们与连接站点的身份。 步骤1：创建SSL证书sudo mkdir /etc/nginx/sslsudo openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt 创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。 参数说明: req: 配置参数-x509指定使用 X.509证书签名请求管理(certificate signing request (CSR)).”X.509” 是一个公钥代表that SSL and TLS adheres to for its key and certificate management.-nodes: 告诉OpenSSL生产证书时忽略密码环节.(因为我们需要Nginx自动读取这个文件，而不是以用户交互的形式)。-days 36500: 证书有效期，100年-newkey rsa:2048: 同时产生一个新证书和一个新的SSL key(加密强度为RSA 2048)-keyout:SSL输出文件名-out:证书生成文件名它会问一些问题。需要注意的是在common name中填入网站域名，如wiki.xby1993.net即可生成该站点的证书，同时也可以使用泛域名如*.xby1993.net来生成所有二级域名可用的网站证书。整个问题应该如下所示: Country Name (2 letter code) [AU]:USState or Province Name (full name) [Some-State]:New YorkLocality Name (eg, city) []:New York CityOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.Organizational Unit Name (eg, section) []:Ministry of Water SlidesCommon Name (e.g. server FQDN or YOUR name) []:your_domain.comEmail Address []:admin@your_domain.com 步骤2： 修改Nginx配置server &#123; listen 80; listen 443 ssl; ssl_certificate \"/Users/chrischen/server/nginx/nginx.crt\"; ssl_certificate_key \"/Users/chrischen/server/nginx/nginx.key\"; server_name \"wui-test.local.aidalan.com\"; server_name \"test-wui.local.aidalan.com\"; root \"/Users/chrischen/dalan/wui-test.local.aidalan.com\"; index index.html index.htm; location / &#123; autoindex on; &#125; #主要配置这个，包含 在server里面# location ~ .*\\.(php)?$ &#123;# fastcgi_pass 127.0.0.1:9000;# fastcgi_index index.php;# include fcgi.conf;# &#125; access_log off; default_type 'text/html'; charset utf-8; set $ACAO '*'; add_header 'Access-Control-Allow-Origin' '$ACAO';&#125; 参考链接 https://segmentfault.com/a/1190000004976222","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"},{"name":"Nginx","slug":"Nginx","permalink":"https://ImChrisChen.Github.io/tags/Nginx/"}]},{"title":"有趣并实用的 JavaScript操作 😲","slug":"神奇的Javascript","date":"2020-03-15T16:28:23.000Z","updated":"2021-05-22T20:39:28.990Z","comments":true,"path":"2020/03/16/神奇的Javascript/","link":"","permalink":"https://ImChrisChen.Github.io/2020/03/16/神奇的Javascript/","excerpt":"","text":"想来搞前端也快2年时间来，想起在刚开始写Javascript的时候，总是能遇见一些奇奇怪怪的问题, 和一些让人 WTF的操作，后面越来越深入的了解到这门语言后，一些令人摸不着头脑东西也就明白为什么会这样了,这里也是记录一些好玩好用的JavaScript的片段，也算是一种输出吧 将多维数组变成一维数组let str = [1,2,[3,4,5,6,7],[8,[10,9]]];// 方法1str.join().split(','); // [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"10\", \"9\"]str.join(',').split(','); // [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"10\", \"9\"]// 方法2 - es6str.flat(Infinity); // [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"10\", \"9\"] 判断是否空对象let isEmptyObject = function(obj) &#123; for(let k in obj) &#123; return false; &#125; return true;&#125;;// 更加简单的办法let isEmptyObj = Object.keys(obj).length === 0; 判断是否是空数组let arr = [];Array.isArray(arr) &amp;&amp; arr.length !== 0; 向下取整的几种简写方式~~2.33 // 22.33 | 0 // 22.33 &gt;&gt; 0 // 22.33 &lt;&lt; 0 // 22.33 ^ 0 // 2 取随机字符串 原理就是将随机转成字符串(11 ~ 36)进制字符串（10进制以上开始出现字母），然后截取去掉小数位 let str = Math.random().toString(16).substring(2);let str2 = Math.random().toString(32).substring(2); console.log(str) // 02f3a8227c04bconsole.log(str2) // hs9lje959eg 一行代码评级组件 用法：”★★★★★☆☆☆☆☆”.slice(5 - num, 10 - num); num的值在1 ~ 5之间 上面的方法只能实现整数，那如何实现小数评级呢？ &lt;div class=\"box\" data-attr=\"after\"&gt;&lt;/div&gt; .box:after&#123; content: attr(data-attr); color: #0C68F7; &#125; $('.after').attr('data-attr','★★★★☆') // 把刚出的字符串动态设置在这里 查看 css ::after (:after) 属性👉🏿：Web 开发技术CSS（层叠样式表）::after (:after) 统计字符串中相同字符出现的次数let str = 'abcdaabc';let result = arr.split('').reduce((p, k) =&gt; (p[k]++ || (p[k] = 1), p), &#123;&#125;);console.log(result); //&#123; a: 3, b: 2, c: 2, d: 1 &#125; 😂立即执行函数的几种写法…..( function() &#123;&#125;() );( function() &#123;&#125; )();[ function() &#123;&#125;() ];~ function() &#123;&#125;();! function() &#123;&#125;();+ function() &#123;&#125;();- function() &#123;&#125;();delete function() &#123;&#125;();typeof function() &#123;&#125;();void function() &#123;&#125;();new function() &#123;&#125;();new function() &#123;&#125;;var f = function() &#123;&#125;();1, function() &#123;&#125;();1 ^ function() &#123;&#125;();1 &gt; function() &#123;&#125;(); DOM调试模式[].forEach.call($$(\"*\"),function(a)&#123; a.style.outline=\"1px solid #\"+(~~(Math.random()*(1&lt;&lt;24))).toString(16)&#125;)","categories":[{"name":"代码片段","slug":"代码片段","permalink":"https://ImChrisChen.Github.io/categories/代码片段/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"}]},{"title":"Mac下iterm2中sz、rz的安装与使用🐣","slug":"Mac下iterm2中sz、rz的安装与使用🐣","date":"2020-03-13T14:25:14.000Z","updated":"2021-05-18T15:53:59.385Z","comments":true,"path":"2020/03/13/Mac下iterm2中sz、rz的安装与使用🐣/","link":"","permalink":"https://ImChrisChen.Github.io/2020/03/13/Mac下iterm2中sz、rz的安装与使用🐣/","excerpt":"","text":"1. 安装lrzsz（需要装 brewhome 🤏🏻）brew install lrzsz 2. 系统配置创建文件 cd /usr/local/binvi iterm2-recv-zmodem.shvi iterm2-send-zmodem.sh 创建好两个文件后分别添加内容： iterm2-recv-zmodem.sh #!/bin/bash# Author: Matt Mastracci (matthew@mastracci.com)# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script# licensed under cc-wiki with attribution required # Remainder of script public domain osascript -e 'tell application \"iTerm2\" to version' &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTermif [[ $NAME = \"iTerm\" ]]; then FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"`else FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"`fi if [[ $FILE = \"\" ]]; then echo Cancelled. # Send ZModem cancel echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18 sleep 1 echo echo \\# Cancelled transferelse cd \"$FILE\" /usr/local/bin/rz -E -e -b sleep 1 echo echo echo \\# Sent \\-\\&gt; $FILEfi iterm2-send-zmodem.sh #!/bin/bash# Author: Matt Mastracci (matthew@mastracci.com)# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script# licensed under cc-wiki with attribution required # Remainder of script public domain osascript -e 'tell application \"iTerm2\" to version' &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTermif [[ $NAME = \"iTerm\" ]]; then FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"`else FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"`fiif [[ $FILE = \"\" ]]; then echo Cancelled. # Send ZModem cancel echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18 sleep 1 echo echo \\# Cancelled transferelse /usr/local/bin/sz \"$FILE\" -e -b sleep 1 echo echo \\# Received $FILEfi 将文件写好后保存好，使用如下命令添加权限 chmod 777 iterm2-* # 把以上两个文件都添加权限（这里的*代表正则匹配的规则） iterm2 设置快捷命令 点击 iTerm2 的设置界面 Perference-&gt; Profiles -&gt; Default -&gt; Advanced -&gt; Triggers 的 Edit 按钮，加入以下配置 Regular expression Action Parameters rz waiting to receive.**B0100 Run Silent Coprocess /usr/local/bin/iterm2-send-zmodem.sh **B00000000000000 Run Silent Coprocess /usr/local/bin/iterm2-recv-zmodem.sh 配置好后如图 img 使用方法rz 上传功能 ：在bash中，也就是iTerm2终端输入rz 就会弹出文件选择框，选择文件 choose 就开始上传，会上传到当前目录 rz sz 下载功能 ：sz fileName(你要下载的文件的名字) 回车，会弹出窗体 我们选择要保存的地方即可。 sz &lt;filename&gt;","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://ImChrisChen.Github.io/tags/Mac/"},{"name":"命令行","slug":"命令行","permalink":"https://ImChrisChen.Github.io/tags/命令行/"}]},{"title":"微信小游戏提审发布流程","slug":"微信小游戏提审发布流程","date":"2020-03-11T07:52:25.000Z","updated":"2021-06-13T08:59:08.081Z","comments":true,"path":"2020/03/11/微信小游戏提审发布流程/","link":"","permalink":"https://ImChrisChen.Github.io/2020/03/11/微信小游戏提审发布流程/","excerpt":"","text":"微信小游戏提审发布流程导入项目 点击上传，覆盖体验版 WX20200206-164738@2x 上传代码 WX20200206-164809@2x 等编译好代码，自动上传 WX20200206-165338@2x 上传成功 登陆微信公众平台https://mp.weixin.qq.com/ 点击提交审核，然后会出来很多选择框 WX20200206-165918@2x WX20200206-170543@2x WX20200206-170553@2x WX20200206-170600@2x 填写游戏内容介绍（首次提审需要）∂ 一些游戏特色，玩法，介绍，游戏背景 等 图文描述 填好提交后，会显示审核中（后来发现不用通过这个审核可以直接提交代码，填写好就可以） Lark20200206-170400 Lark20200206-170756 提交审核点击提交审核，然后会出来很多选择框 WX20200206-170128@2x WX20200206-170031@2x WX20200206-170158@2x 提交成功，正在审核 Lark20200206-171725","categories":[],"tags":[{"name":"微信小程序/小游戏","slug":"微信小程序-小游戏","permalink":"https://ImChrisChen.Github.io/tags/微信小程序-小游戏/"}]},{"title":"使用 git status 显示中文乱码问题😼","slug":"Git显示中文乱码问题😼","date":"2020-02-11T05:11:38.000Z","updated":"2021-05-22T20:39:28.987Z","comments":true,"path":"2020/02/11/Git显示中文乱码问题😼/","link":"","permalink":"https://ImChrisChen.Github.io/2020/02/11/Git显示中文乱码问题😼/","excerpt":"","text":"现象git status查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便 git log 却能正确显示 寻找原因了解后，由于Git在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。 解决问题将 Git的配置项 core.quotepath 设置为false， quotepath 表示引用路径 加上–global代表全局配置 git config --global core.quotepath false 输入命令则自动写入到 ~/.gitconfig 文件中 当然也可以直接修改 .gitconfig 进行配置等等，还可以设置alias等一些列配置 git全局配置文件 Mac 一般存放在 ~/.gitconfig 中 效果这样设置完成后，一般都能看见中文了，如果还是乱码，可以看看 shell 终端 bash ，zsh 等配置 是否设置支持中文显示","categories":[{"name":"工具配置","slug":"工具配置","permalink":"https://ImChrisChen.Github.io/categories/工具配置/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://ImChrisChen.Github.io/tags/Mac/"},{"name":"git","slug":"git","permalink":"https://ImChrisChen.Github.io/tags/git/"}]},{"title":"vue-awesome-swiper 自定义分页器样式","slug":"vue-awesome-swiper-自定义分页器样式","date":"2019-11-29T03:04:32.000Z","updated":"2021-05-18T15:53:59.388Z","comments":true,"path":"2019/11/29/vue-awesome-swiper-自定义分页器样式/","link":"","permalink":"https://ImChrisChen.Github.io/2019/11/29/vue-awesome-swiper-自定义分页器样式/","excerpt":"","text":"！！！注意！！！ style 标签里要把 scoped 属性去掉,这样才能继承到子组件，否则自定义样式不会生效html &lt;swiper :options=\"swiperOption\"&gt; &lt;swiper-slide v-for=\"(EmojiList,index) in EmojiLists\" class=\"swiper_slide\"&gt; &lt;img v-for=\"(Emoji,subIndex) in EmojiList\" :src=\"Emoji.url\"&gt; &lt;/swiper-slide&gt; &lt;div class=\"swiper-pagination\" slot=\"pagination\"&gt;&lt;/div&gt;&lt;/swiper&gt; Javascript &lt;script&gt; export default &#123; data() &#123; return &#123; swiperOption: &#123; pagination: &#123; el: '.swiper-pagination', clickable: true, bulletClass: 'my-bullet', // 分页器每一项class bulletActiveClass: 'my-bullet-active', // 当前选中的class &#125; &#125;, &#125; &#125; &#125;&lt;/script&gt; css&lt;style lang=\"less\"&gt; .swiper-pagination &#123; .my-bullet &#123; height: 17px; width: 17px; background: #F2F4F6; border: 1px solid #192A51; box-sizing: border-box; display: inline-block; border-radius: 50%; margin-right: 8px; &amp;:last-child &#123; margin-right: 0; &#125; &#125; .my-bullet-active &#123; background: #26A9ED; &#125; &#125;&lt;/style&gt; 效果图","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"},{"name":"css","slug":"css","permalink":"https://ImChrisChen.Github.io/tags/css/"},{"name":"npm","slug":"npm","permalink":"https://ImChrisChen.Github.io/tags/npm/"}]},{"title":"input框type=file转化图片为Base64 😲","slug":"input框-type-file-转化图片为Base64","date":"2019-11-28T14:08:51.000Z","updated":"2021-05-22T20:39:28.989Z","comments":true,"path":"2019/11/28/input框-type-file-转化图片为Base64/","link":"","permalink":"https://ImChrisChen.Github.io/2019/11/28/input框-type-file-转化图片为Base64/","excerpt":"","text":"html&lt;input onchange=\"handleChangeInputFile\" type=\"file\" accept=\"image/*\"&gt; Javascriptfunction handleChangeInputFile(e) &#123; // input调用原声相册后获取到文件对象 let file = this.$refs.InputFile.files[0]; //https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader let reader = new FileReader() let filename = file.name.replace(/\\.(.*)/g, '') let self = this; reader.readAsDataURL(file) reader.onload = function (e) &#123; // this.result 就是图片的base64 self.uploadBase64Image(this.result, filename).then(url =&gt; &#123; self.$emit('handleAddImage', url, 'photo'); &#125;) &#125;&#125;","categories":[{"name":"代码片段","slug":"代码片段","permalink":"https://ImChrisChen.Github.io/categories/代码片段/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"html","slug":"html","permalink":"https://ImChrisChen.Github.io/tags/html/"}]},{"title":"Contenteditable 设置placeholder属性","slug":"Contenteditable-可编辑div设置placeholder属性","date":"2019-11-28T13:48:39.000Z","updated":"2021-05-23T14:38:32.300Z","comments":true,"path":"2019/11/28/Contenteditable-可编辑div设置placeholder属性/","link":"","permalink":"https://ImChrisChen.Github.io/2019/11/28/Contenteditable-可编辑div设置placeholder属性/","excerpt":"","text":"HTML&lt;div class=\"textarea\" contenteditable=\"true\" placeholder=\"请输入补充说明\"&gt;&lt;/div&gt; CSS.textarea &#123; width: 100%; min-height: 210px; &amp;:empty:before &#123; content: attr(placeholder); //设置attr属性，使placeholder属性生效 color: rgba(170, 159, 159, 1); &#125; &amp;:focus:before&#123; content:none; &#125; &#125;","categories":[],"tags":[{"name":"html","slug":"html","permalink":"https://ImChrisChen.Github.io/tags/html/"},{"name":"css","slug":"css","permalink":"https://ImChrisChen.Github.io/tags/css/"}]},{"title":"如何进行Web程序性能优化🛁","slug":"如何进行Web程序性能优化🛁","date":"2019-08-17T05:27:10.000Z","updated":"2021-06-12T06:59:21.097Z","comments":true,"path":"2019/08/17/如何进行Web程序性能优化🛁/","link":"","permalink":"https://ImChrisChen.Github.io/2019/08/17/如何进行Web程序性能优化🛁/","excerpt":"","text":"浏览器html 减少DOM数量 不要在HTML中拉伸图片 （会重新绘制） css 避免重复定义CSS，CSS覆盖等 不使用CSS表达式 javascript 减少DOM访问（避免重绘 和 回流） 合理设计事件监听器 避免 DOM 阻塞 （JavaScript放在最后面，或者加上defer 标签） 资源 静态资源压缩，使用CDN 缓存 客户端缓存 服务端缓存 http 缓存 网络Http 减少 HTTP 请求数量（合并文件、CSS精灵 (图片合成)、inline Image） 减少 HTTP 请求大小 添加Expires或者Cache-Control响应头 服务器 nginx 开启 gzip 压缩 减小cookie大小 引入资源的域名不要包含cookie content方面 减少HTTP请求：合并文件、CSS精灵 (图片合成)、inline Image 减少DNS查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询 避免重定向：多余的中间访问 使Ajax可缓存 非必须组件延迟加载 ( 插件，组件，图片等懒加载同理 ) 未来所需组件预加载 减少DOM元素数量 将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量 减少iframe数量 避免404 Server方面 使用CDN 配置ETag Flush Buffer Early Ajax使用GET进行请求","categories":[{"name":"性能优化","slug":"性能优化","permalink":"https://ImChrisChen.Github.io/categories/性能优化/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"html","slug":"html","permalink":"https://ImChrisChen.Github.io/tags/html/"},{"name":"css","slug":"css","permalink":"https://ImChrisChen.Github.io/tags/css/"}]},{"title":"Http Request、Response报文结构☎️","slug":"http Response报文结构☎️","date":"2019-08-17T04:28:35.000Z","updated":"2021-05-18T15:53:59.387Z","comments":true,"path":"2019/08/17/http Response报文结构☎️/","link":"","permalink":"https://ImChrisChen.Github.io/2019/08/17/http Response报文结构☎️/","excerpt":"","text":"常见的请求头(request)字段含义： 字段 含义 Accept 浏览器可接受的MIME类型 Accept-Charset 浏览器可接受的字符集 Accept-Encoding 浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。 Accept-Language 浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。 Authorization 授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。 Content-Length 表示请求消息正文的长度 Host 主机名 If-Modified-Since 资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答 Referer 包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。 User-Agent User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用 Cookie 客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。 Connection 处理完这次请求后是否断开连接还是继续保持连接 (HTTP 1.1默认进行持久连接 . ‘keep-alive’) 常见的响应头字段含义 字段 含义 Allow 服务器支持哪些请求方法(如GET、POST等)。 Content-Encoding 文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。 Content-Length 表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容 Content- Type 表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。 Date 当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦 Expires 告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存 Last-Modified 文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。 Location 这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。 Refresh 告诉浏览器隔多久刷新一次，以秒计 Server 服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。 Set-Cookie 设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie Transfer-Encoding 告诉浏览器数据的传送格式 WWW-Authenticate 客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\\”executives\\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问","categories":[],"tags":[{"name":"Http","slug":"Http","permalink":"https://ImChrisChen.Github.io/tags/Http/"}]},{"title":"Hexo-cli 的使用","slug":"Hexo-cli 的使用","date":"2019-08-15T17:24:54.000Z","updated":"2021-05-22T20:39:28.987Z","comments":true,"path":"2019/08/16/Hexo-cli 的使用/","link":"","permalink":"https://ImChrisChen.Github.io/2019/08/16/Hexo-cli 的使用/","excerpt":"","text":"准备工作 安装Git 安装Node 安装Hexo-cli npm install -g hexo-cli 初始化项目hexo init &lt;项目名称&gt; 新建完成后会生成以下目录 目录名称 主要内容 node_modules 项目依赖文件 public 存放生成的页面 scaffolds 生成文章的一些模板 source 用来存放你的文章 themes 主题 _config.yml 博客的配置文件 Hexo 常用命令hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本hexo deploy -g #生成加部署hexo server -g #生成加预览hexo clean # 清理多余文件命令的简写hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deployhexo g -d #一键部署","categories":[],"tags":[{"name":"工具类","slug":"工具类","permalink":"https://ImChrisChen.Github.io/tags/工具类/"}]},{"title":"🤔深刻理解localStorage sessionStorage","slug":"🤔深刻理解localStorage sessionStorage","date":"2019-08-15T16:16:38.000Z","updated":"2021-06-12T06:59:21.098Z","comments":true,"path":"2019/08/16/🤔深刻理解localStorage sessionStorage/","link":"","permalink":"https://ImChrisChen.Github.io/2019/08/16/🤔深刻理解localStorage sessionStorage/","excerpt":"","text":"localStorage有效期为永久，sessionStorage有效期为顶层窗口关闭前 同源文档可以读取并修改localStorage数据，sessionStorage只允许同一个窗口下的文档访问，如通过iframe引入的同源文档。 共同点 存储大小均为5M左右（不同浏览器之间存在差异） 都有同源策略限制 仅在客户端中保存，不参与和服务器的通信 不同点 生命周期 localStorage理论上来说是永久有效的，即不主动清空的话就不会消失，即使保存的数据超出了浏览器所规定的大小，也不会把旧数据清空而只会报错。但需要注意的是，在移动设备上的浏览器或各Native App用到的WebView里，localStorage都是不可靠的，可能会因为各种原因（比如说退出App、网络切换、内存不足等原因）被清空。 sessionStorage: 与存储数据的脚本所在的标签页的有效期是相同的。一旦窗口或者标签页被关闭，那么所有通过 sessionStorage 存储的数据也会被删除。 作用域 localStorage只要在相同的协议、相同的主机名、相同的端口下，就能读取/修改到同一份localStorage数据。 sessionStorage比localStorage更严苛一点，除了协议、主机名、端口外，还要求在同一窗口（也就是浏览器的标签页）下。 这些图可以更好的帮助理解 数据结构localstorage为标准的键值对（Key-Value,简称KV）数据类型，简单但也易扩展，只要以某种编码方式把想要存储进localstorage的对象给转化成字符串，就能轻松支持。举点例子：把对象转换成json字符串，就能让存储对象了；把图片转换成DataUrl（base64），就可以存储图片了。另外对于键值对数据类型来说，“键是唯一的”这个特性也是相当重要的，重复以同一个键来赋值的话，会覆盖上次的值。 浏览器兼容性注意!!! 在ios设备上无法重复setItem()，需要在setItem 前 removeItem() 查看浏览器兼容情况 ☞ MDN","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"html","slug":"html","permalink":"https://ImChrisChen.Github.io/tags/html/"}]},{"title":"Axios请求拦截器配置","slug":"Axios请求拦截器配置","date":"2019-08-14T13:58:43.000Z","updated":"2021-05-22T20:39:28.987Z","comments":true,"path":"2019/08/14/Axios请求拦截器配置/","link":"","permalink":"https://ImChrisChen.Github.io/2019/08/14/Axios请求拦截器配置/","excerpt":"","text":"通常在请求拦截器中可以做 Loading加载动画，token过期验证，登陆验证等等… 响应拦截器中可以做 统一报错信息处理 import Axios from 'axios';import router from '../router';import &#123; Message &#125; from 'element-ui';Axios.defaults.baseURL = process.env.VUE_APP_BASE_API; // 设置基础路径Axios.defaults.timeout = 5000; // 设置请求超时时间Axios.interceptors.request.use( config =&gt; &#123; let token = JSON.parse(localStorage.getItem('token') || null); if (token) &#123; config.headers['secretKey'] = token.secretKey; config.headers['timestamp'] = token.timestamp; config.headers['uuid'] = token.uuid; &#125; return config; &#125;, err =&gt; &#123; console.log(err); &#125;);// response 响应拦截器Axios.interceptors.response.use( res =&gt; &#123; // 401 您还未登录，或登录信息已过期 if (res.data.status_code !== 200) &#123; Message(&#123; message: res.data.message, type: 'error' &#125;); if (res.data.status_code === 401) &#123; router.push(&#123; path: '/login' &#125;); &#125; &#125; return res.data; &#125;, err =&gt; &#123; console.log(err); // 超时处理 let originalRequest = err.config; console.log(err.message); //timeout of 100ms exceeded if (err.code === 'ECONNABORTED' &amp;&amp; err.message.indexOf('timeout') !== -1 &amp;&amp; !originalRequest._retry) &#123; originalRequest._retry = true Message.error('请求超时,尝试重新请求中...') // 重新发起请求 return Axios.request(originalRequest); &#125; &#125;);","categories":[{"name":"代码片段","slug":"代码片段","permalink":"https://ImChrisChen.Github.io/categories/代码片段/"}],"tags":[{"name":"Axios","slug":"Axios","permalink":"https://ImChrisChen.Github.io/tags/Axios/"},{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"}]},{"title":"Github 上 emoji 的表情含义","slug":"Github-上-emoji-的表情含义","date":"2019-08-14T08:13:50.000Z","updated":"2021-05-18T15:53:59.384Z","comments":true,"path":"2019/08/14/Github-上-emoji-的表情含义/","link":"","permalink":"https://ImChrisChen.Github.io/2019/08/14/Github-上-emoji-的表情含义/","excerpt":"","text":"🎨 - 改进结构和代码格式 ⚡️ - 优化性能 🔥 - 移除代码或文件 🐛 - 修复 bug ✨ - 引入新功能 🍎 - 修复 MacOS 下的问题 📝 - 写文档 🚀 - 部署新功能 ✅ - 添加测试用例 🔖 - 发版/版本标签 🔒 - 修复安全问题 🐧 - 修复 Linux 下的问题 🚨 - 移除 linter 的警告 🚧 - 工作在进行中 💚 - 修复 CI 构建问题 ⬇️ - 降级依赖库 🏁 - 修复 Windows 下的问题 ⬆️ - 升级依赖库 👷 - 添加 CI 构建系统 🔧 - 改变配置文件 🔨 - 大重构 🎉 - 初次提交 💄 - 升级 UI 和样式文件","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://ImChrisChen.Github.io/tags/Git/"}]},{"title":"JavaScript时间戳转换日期格式 👇🏻","slug":"JavaScript时间戳转换日期格式","date":"2019-07-21T10:22:34.000Z","updated":"2021-05-22T20:39:28.988Z","comments":true,"path":"2019/07/21/JavaScript时间戳转换日期格式/","link":"","permalink":"https://ImChrisChen.Github.io/2019/07/21/JavaScript时间戳转换日期格式/","excerpt":"","text":"/** * 日期格式化 * @param stamp &#123; Date &#125; Date 实例 * @param format &#123; string &#125; * @return &#123; string &#125; */export const dateFormat = (stamp = new Date(), format = 'YYYY-MM-DD hh:mm:ss') =&gt; &#123; const d = new Date(stamp); const month = d.getMonth() + 1; const date = d.getDate(); const hours = d.getHours(); const minutes = d.getMinutes(); const seconds = d.getSeconds(); const numberFormat = (number) =&gt; number &lt; 10 ? `0$&#123;number&#125;` : number; format = format.replace(/yyyy|YYYY/, d.getFullYear()); format = format.replace(/yy|YY/, d.getYear()); format = format.replace(/MM/, numberFormat(month)); format = format.replace(/M/, month); format = format.replace(/dd|DD/, numberFormat(date)); format = format.replace(/d|D/, date); format = format.replace(/hh|HH/, numberFormat(hours)); format = format.replace(/h|H/, hours); format = format.replace(/mm/, numberFormat(minutes)); format = format.replace(/m/, minutes); format = format.replace(/ss/, numberFormat(seconds)); format = format.replace(/s/, seconds); return format;&#125;","categories":[{"name":"代码片段","slug":"代码片段","permalink":"https://ImChrisChen.Github.io/categories/代码片段/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"}]},{"title":"网页Head中meta、link里面的各种属性的设置","slug":"网页Head中meta、link里面的各种属性的设置","date":"2019-07-20T12:12:33.000Z","updated":"2021-05-18T15:53:59.391Z","comments":true,"path":"2019/07/20/网页Head中meta、link里面的各种属性的设置/","link":"","permalink":"https://ImChrisChen.Github.io/2019/07/20/网页Head中meta、link里面的各种属性的设置/","excerpt":"","text":"&lt;head&gt; &lt;!-- 声明文档使用的字符编码 --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;!-- 声明文档的兼容模式 --&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge,chrome=1\"&gt;&lt;!-- 指示ie以目前可用的最高模式显示内容 --&gt; &lt;!-- 定义对页面的描述 --&gt; &lt;meta name=\"description\" content=\"官网首页模板\"&gt; &lt;!-- 定义页面的最新版本 --&gt; &lt;meta name=\"revised\" content=\"Frank,2017/7/15\"&gt;&lt;!-- SEO优化 --&gt; &lt;!-- 定义针对搜索引擎的关键词 --&gt; &lt;meta name=\"keywords\" content=\"官网，模板，首页，...\"&gt; &lt;!-- 定义网页的作者 --&gt; &lt;meta name=\"author\" content=\"某某某\"&gt; &lt;!-- 定义网页搜索引擎索引方式 ,常见的几种取值none,noindex,nofollow,all,index和follow--&gt; &lt;meta name=\"robots\" content=\"index,follow\"&gt; &lt;!-- 为移动设备添加viewport --&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"&gt; &lt;!-- IOS设备 --&gt; &lt;!-- 添加到主屏后的标题（ios6开始） --&gt; &lt;meta name=\"apple-mobile-web-app-title\" content=\"标题\"&gt; &lt;!-- 设置状态栏的背景颜色（前提） --&gt; &lt;meta name=\"apple-mobile-web-app-title\" content=\"yes\"&gt; &lt;!-- 设置状态栏背景色content参数释义：default 默认值，网页内容从状态栏底部开始 black 状态栏背景是黑色，网页内容从状态栏底部开始 black-translucent 状态栏背景是黑色半透明，网页内容充满整个屏幕，顶部会被状态栏遮挡 --&gt; &lt;meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\"&gt; &lt;!-- 是否启用webapp全屏模式 --&gt; &lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\"&gt; &lt;!-- window8 --&gt; &lt;!-- window8磁贴颜色 --&gt; &lt;meta name=\"msapplication-TileColor\" content=\"#000\"&gt; &lt;!-- window8磁贴图标 --&gt; &lt;meta name=\"msapplication-TileImage\" content=\"icon.png\"&gt; &lt;!-- 禁止数字自动识别为电话号码 --&gt; &lt;meta name=\"format-detection\" content=\"telephone=no\"&gt; &lt;!-- 不让Android识别邮箱 --&gt; &lt;meta name=\"format-detection\" content=\"email=no\"&gt; &lt;!-- 每8秒刷新一次页面 --&gt; &lt;meta http-equiv=\"refresh\" content=\"n\"&gt; &lt;title&gt;我的官网模板&lt;/title&gt; &lt;!-- 引入网站小图标 --&gt; &lt;!--shortcut icon,特指浏览器中地址栏左侧显示的图标，一般大小为16x16，后缀名为.icon --&gt; &lt;!-- icon，指的是图标，格式可为PNG\\GIF\\JPEG，尺寸一般为16x16、24x24、36x36等。--&gt; &lt;link rel=\"shortcut icon\" href=\"logo.png\" type=\"image/x-icon\"&gt; &lt;link rel=\"icon\" href=\"logo.png\" type=\"image/x-icon\"&gt; &lt;/head&gt;","categories":[],"tags":[{"name":"html","slug":"html","permalink":"https://ImChrisChen.Github.io/tags/html/"}]},{"title":"webstorm配置小程序rpx格式化删除多余空格","slug":"webstorm配置小程序rpx格式化删除多余空格","date":"2019-06-17T07:00:56.000Z","updated":"2021-05-18T15:53:59.389Z","comments":true,"path":"2019/06/17/webstorm配置小程序rpx格式化删除多余空格/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/17/webstorm配置小程序rpx格式化删除多余空格/","excerpt":"","text":"设置中找到 file watchers 添加 填写配置 program 填写 sed arguments填写 -i &quot;&quot; s/&quot;\\ rpx&quot;/rpx/g $FilePath$ Output paths to refresh 填写 $FilePath$ 然后添加保存就完事了","categories":[],"tags":[{"name":"webstorm","slug":"webstorm","permalink":"https://ImChrisChen.Github.io/tags/webstorm/"},{"name":"微信小程序","slug":"微信小程序","permalink":"https://ImChrisChen.Github.io/tags/微信小程序/"}]},{"title":"JavaScript闭包的理解","slug":"对闭包的理解","date":"2019-06-17T07:00:56.000Z","updated":"2021-05-22T20:39:28.989Z","comments":true,"path":"2019/06/17/对闭包的理解/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/17/对闭包的理解/","excerpt":"","text":"闭包，是JavaScript 一个重要的概念，一个抽象的概念，特别是ECMAscript规范的定义，如果没有实战经验，很难从定义去理解它。 简陋的实现 function A() &#123; function B() &#123; console.log('Hi Chris ~'); &#125; return B&#125;let C = A(); // 保存A方法执行的结果,也就是B函数体C(); // 这里可以看做是B该函数体执行 这是最简单的闭包 初步的认识后，我们简单分析一下它和普通函数有什么区别，上面代码翻译成人话如下： 函数A的内部函数B ，被函数A外的一个变量C调用。 从而可以得到整个闭包的定义 当一个内部函数( 函数中定义的函数 )被其外部函数之外的变量调用时，就形成了一个闭包。 用途？ 应用场景？ 了解闭包之前，先了解一下JavaScript中的GC机制 ( 垃圾回收机制 ) : 在JavaScript中，如果一个对象不再被引用，那么这个对象就会被GC回收，否则这个对象会一直保存在内存中。 上面的🌰中，B定义在A中，因此B依赖于A ，而外部变量C 又调用了B，所以A间接的被C调用。 也就是说，A 不会被GC回收，会一直保存在内存中，为了证明我们的推理，对上面的例子进行简陋的改进 function A() &#123; let count = 10; function B() &#123; count ++; console.log(count); &#125; return B&#125;let C = A(); // 保存A方法执行的结果,也就是B函数体C(); // 11 C(); // 12C(); // 13 A没有被释放，一直保存着 count 每次运算后的结果 count 是函数A中的一个变量，它的值在函数B中被改变，函数B每执行一次，count 的值就在原来的基础上累加， 因此A中的count变量会一直保存在内存中。 当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中，但又不会污染全局变量的时候，就可以使用闭包来定义这个模块。 似曾相识的写法 有看过Jquery源码的同志都应该觉得好眼熟有没有 (function (document) &#123; let viewport; let obj = &#123; init: function (id) &#123; viewport = document.querySelector('#' + id); &#125;, addChild: function (child) &#123; viewport.appendChild(child); &#125;, removeChild: function (child) &#123; viewport.removeChild(child); &#125; &#125; window.jView = obj;&#125;)(document); 这个组件的作用是：初始化一个容器，然后可以给这个容器添加子容器，也可以移除一个容器。 功能很简单，但这里涉及到了另外一个概念：立即执行函数。 简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。 可以将上面的代码拆分成两部分：(function(){}) 和 () 。 第1个() 是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加 () 就表示执行这个匿名函数。 因此这段代码执行执行过程可以分解如下： let f = function (document) &#123; let viewport; let obj = &#123; init: function (id) &#123; viewport = document.querySelector('#' + id); &#125;, addChild: function (child) &#123; viewport.appendChild(child); &#125;, removeChild: function (child) &#123; viewport.removeChild(child); &#125; &#125; window.jView = obj;&#125;;f(document); 在这段代码中似乎看到了闭包的影子，但 f 中没有任何返回值，似乎不具备闭包的条件，注意这句代码： `window.jView = obj;` obj 是在函数 f 中定义的一个对象，这个对象中定义了一系列方法， 执行window.jView = obj 就是在 window 全局对象定义了一个变量 jView，并将这个变量指向 obj 对象，即全局变量 jView 引用了 obj . 而 obj 对象中的函数又引用了函数 f 中的变量 viewport ,因此函数 f 中的 viewport 不会被 GC 回收，viewport 会一直保存到内存中，所以这种写法满足了闭包的条件。 总结 这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的执行环境(execution context)、活动对象(activation object)以及作用域(scope)和作用域链(scope chain)的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"}]},{"title":"节流和防抖的理解","slug":"节流和防抖的理解","date":"2019-06-13T05:09:14.000Z","updated":"2021-05-18T15:53:59.391Z","comments":true,"path":"2019/06/13/节流和防抖的理解/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/13/节流和防抖的理解/","excerpt":"","text":"节流 什么是节流？ 节流的目的？ 节流指尽可能减少不必要的开支 ，消耗更少的资源办更多的事 节流的理解 原理是通过判断是否到达一定时间来触发函数 为什么要节流？ 在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。 简陋的实现&lt;script&gt; let body = document.body; let start = 0; let key = false; body.onmousemove = function () &#123; throttle1(300, function () &#123; console.log(1); &#125;) &#125;; // 方法1 通过触发事件的时间间隔，判断节流处理 function throttle1(delay, fn) &#123; if (!start) start = Date.now(); let currentTime = Date.now(); if (currentTime - start &gt; delay) &#123; fn(); start = 0; &#125; &#125; // 方法2 通过上锁的方式做节流处理(如果代码执行中，则终止操作) function throttle2(delay, fn) &#123; if (key) return false; key = true; setTimeout(function () &#123; fn(); key = false; &#125;, delay) &#125; &lt;/script&gt; 防抖 什么是防抖？ 所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。 防抖的目的 在一定时间内的几次操作合并为一次操作进行。 防抖的理解 原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。 简陋的实现&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;防抖 - debounce&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=\"text\" id=\"ipt\"&gt;&lt;/body&gt;&lt;/html&gt;&lt;script&gt; let ipt = document.querySelector('#ipt'); let timer; ipt.onkeyup = function () &#123; debounce(2000, function () &#123; console.log(1); &#125;) &#125;; /** * 防抖封装函数 - 应用场景(联想查询) */ function debounce(delay, fn) &#123; if (timer) clearTimeout(timer); timer = setTimeout(fn, delay) &#125;&lt;/script&gt; 代码封装/** * 防抖函数 * @param method 事件触发的操作 * @param delay 多少毫秒内连续触发事件，不会执行 * @returns &#123;Function&#125; */export const debounce = (method, delay) =&gt; &#123; let timer = null; return function () &#123; let self = this, args = arguments; timer &amp;&amp; clearTimeout(timer); timer = setTimeout(function () &#123; method.apply(self, args); &#125;, delay); &#125;&#125;/** * 节流函数 * @param method 事件触发的操作 * @param mustRunDelay 间隔多少毫秒需要触发一次事件 */export const throttle = (method, mustRunDelay) =&gt; &#123; let timer, args = arguments, start; return function loop() &#123; let self = this; let now = Date.now(); if (!start) &#123; start = now; &#125; if (timer) &#123; clearTimeout(timer); &#125; if (now - start &gt;= mustRunDelay) &#123; method.apply(self, args); start = now; &#125; else &#123; timer = setTimeout(function () &#123; loop.apply(self, args); &#125;, 100); &#125; &#125;&#125;","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"前端优化","slug":"前端优化","permalink":"https://ImChrisChen.Github.io/tags/前端优化/"}]},{"title":"微信小程序一些常用操作","slug":"微信小程序一些常用操作","date":"2019-06-13T03:48:07.000Z","updated":"2021-05-18T15:53:59.390Z","comments":true,"path":"2019/06/13/微信小程序一些常用操作/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/13/微信小程序一些常用操作/","excerpt":"","text":"app.wxss 全局样式修改 隐藏scroll-view滚动条/*隐藏scroll-view滚动条*/::-webkit-scrollbar&#123; width: 0; height: 0; color: transparent;&#125; 去除Button默认边框/*去除Button默认边框*/button::after &#123; border: none;&#125; 去除点击 navigator 链接样式/*去除点击 navigator 链接样式*/.navigator-hover &#123; color: none; background: none;&#125; 刷新页面图片加载时变形问题&lt;image class=\"img\" mode=\"widthFix\" src=\"你的图片地址\"&gt;&lt;/image&gt; .class &#123; height: auto;&#125; setData 设置数组中的某一项值data: &#123; isChecked: [true, true, true, true, true, true, true, true, true, true]&#125;click : function (e) &#123; let index = e.target.index; //根据点击不同的view获取对应的id值 let str = `isChecked[$&#123;index&#125;]`; //重点在这里，组合出一个字符串 this.setData(&#123; [str]: false //用中括号把str括起来即可 &#125;)&#125; 携带参数放回上一页onUnload() &#123; let pages = getCurrentPages(); // 当前页面栈 let prevPage = pages[pages.length - 2]; // 上个页面栈 console.log(prevPage); // 把数据直接设置到上个页面的data里面，返回后，在onShow里面可以直接通过this.data 获取到 prevPage.setData(&#123; book_id: this.data.book_id &#125;); // wx.navigateBack(&#123;&#125;);&#125;","categories":[],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ImChrisChen.Github.io/tags/微信小程序/"}]},{"title":"Vue-cli-3.x tsconfig.js配置说明","slug":"Vue-cli-3-x-tsconfig-js配置说明","date":"2019-06-12T09:29:49.000Z","updated":"2021-05-18T15:53:59.386Z","comments":true,"path":"2019/06/12/Vue-cli-3-x-tsconfig-js配置说明/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/12/Vue-cli-3-x-tsconfig-js配置说明/","excerpt":"","text":"//tsconfig.json指定了用来编译这个项目的根文件和编译选项&#123; //compilerOptions:编译选项,可以被忽略，这时编译器会使用默认值 \"compilerOptions\": &#123; //允许从没有设置默认导出的模块中默认导入。这并不影响代码的显示，仅为了类型检查。 \"allowSyntheticDefaultImports\": true, //解析非相对模块名的基准目录 \"baseUrl\": \"./src\", //给源码里的装饰器声明加上设计类型元数据 \"emitDecoratorMetadata\": true, //启用实验性的ES装饰器 \"experimentalDecorators\": true, //指定生成哪个模块系统代码 \"module\": \"commonjs\", //决定如何处理模块。或者是\"Node\"对于Node.js/io.js，或者是\"Classic\"（默认） \"moduleResolution\": \"node\", //不再输出文件中生成用户自定义的帮助函数代码，如__extends。 \"noEmitHelpers\": true, //在表达式和声明上有隐含的any类型时报错 \"noImplicitAny\": false, //用于debug ,生成相应的.map文件 \"sourceMap\": true, //在严格的null检查模式下，null和undefined值不包含在任何类型里，只允许用它们自己和any来赋值（有个例外，undefined可以赋值到void）。 \"strictNullChecks\": false, //目标代码类型 \"target\": \"es5\", \"paths\": &#123; //模块名到基于baseUrl的路径映射的列表 &#125;, \"lib\": [ //编译过程中需要引入的库文件的列表 \"dom\", \"es6\" ], \"types\": [ //要包含的类型声明文件名列表；如果指定了types，只有被列出来的包才会被包含进来 \"hammerjs\", \"node\", \"source-map\", \"uglify-js\", \"webpack\" ] &#125;, \"exclude\": [ //如果\"files\"和\"include\"都没有被指定，编译器默认包含当前目录和子目录下所有的TypeScript文件（.ts, .d.ts 和 .tsx），排除在\"exclude\"里指定的文件。 \"node_modules\", \"dist\" ], //Typescript加载选项 \"awesomeTypescriptLoaderOptions\": &#123; \"forkChecker\": true, \"useWebpackText\": true &#125;, \"compileOnSave\": false, \"buildOnSave\": false, \"atom\": &#123; \"rewriteTsconfig\": false &#125;&#125;","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"},{"name":"Typescript","slug":"Typescript","permalink":"https://ImChrisChen.Github.io/tags/Typescript/"}]},{"title":"Axios发送post请求后台获取不到数据🥲","slug":"Axios发送post请求后台获取不到数据","date":"2019-06-12T07:16:48.000Z","updated":"2021-05-22T20:39:28.986Z","comments":true,"path":"2019/06/12/Axios发送post请求后台获取不到数据/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/12/Axios发送post请求后台获取不到数据/","excerpt":"","text":"原因： 前端传入的数据格式和后台接口接收数据类型不一致 1. URLSearchParams (不推荐) URLSearchParams 对URL上的字符串数据进行类型处理 此方法不兼容IE 和 edge 浏览器 链接 代码展示 let paramsObj = new URLSearchParams();paramsObj.append('openid', 'oSrdV47XurWKLdhjheQ_9U1UKrWQ'); // key,valueaxios(&#123; method: 'post', url: '/api_prod/booklist/get_topic_list', data: paramsObj&#125;).then(res =&gt; &#123; // Coding&#125;) 2. qs模块 stringify方法 字符串解析和序列化字符串的库 安装 npm install qs --save 示例代码 import axios from 'axios'import qs from 'qs'created() &#123; axios(&#123; method: 'post', url: '/api_prod/booklist/get_topic_list', data: qs.stringify(&#123; key: 'value' &#125;), &#125;).then(res =&gt; &#123; // Coding &#125;)&#125; 3. 和后台协商改变接收参数方式上面这些情况一般都是由于前后端数据类型交互格式不一致所导致的例如后端使用的是 application/x-www-form-urlencoded格式数据格式为：id=1&amp;name=chris 前端发送的数据是 application/json 格式数据格式为：{id:1,name:&#39;chris&#39;} 就会纯在上面所说的情况,需要用一些方法去处理和转译 然儿最好的办法还是直接从文档上就统一好这些规范，避免在开发时出现不必要的联调，导致降低效率","categories":[{"name":"解决问题相关","slug":"解决问题相关","permalink":"https://ImChrisChen.Github.io/categories/解决问题相关/"}],"tags":[{"name":"Axios","slug":"Axios","permalink":"https://ImChrisChen.Github.io/tags/Axios/"},{"name":"Http","slug":"Http","permalink":"https://ImChrisChen.Github.io/tags/Http/"},{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"}]},{"title":"webstorm中识别vue-cli-3.x的别名","slug":"webstorm中识别vue-cli-3-x的别名","date":"2019-06-12T07:13:39.000Z","updated":"2021-05-18T15:53:59.388Z","comments":true,"path":"2019/06/12/webstorm中识别vue-cli-3-x的别名/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/12/webstorm中识别vue-cli-3-x的别名/","excerpt":"","text":"打开设置 进入 WebStorm preferences -&gt; Language &amp; Framework -&gt; JavaScript -&gt; Webpack 选择文件 项目目录\\node_modules@vue\\cli-service\\webpack.config.js","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"},{"name":"webstorm","slug":"webstorm","permalink":"https://ImChrisChen.Github.io/tags/webstorm/"}]},{"title":"Vue.config.js跨域配置","slug":"常用跨域解决方案整理","date":"2019-06-12T06:57:32.000Z","updated":"2021-05-22T20:39:28.990Z","comments":true,"path":"2019/06/12/常用跨域解决方案整理/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/12/常用跨域解决方案整理/","excerpt":"","text":"项目根目录新建vue.config.jstouch vue.config.js 设置跨域module.exports = &#123; devServer: &#123; proxy: &#123; '/api': &#123; target: 'https://www.boomore.cn', changeOrigin: true, // 是否开启跨域 pathRewiter: &#123; '^/api_prod': '' &#125; &#125; &#125; &#125;&#125;; 调用APIaxios(&#123; method: 'post', url: '/api_prod/booklist/get_topic_list', data: qs.stringify(&#123; key: value, &#125;),&#125;).then(res =&gt; &#123; // Coding&#125;)","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"}]},{"title":"Node发送邮件","slug":"Node发送邮件","date":"2019-06-12T06:53:39.000Z","updated":"2021-05-18T15:53:59.386Z","comments":true,"path":"2019/06/12/Node发送邮件/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/12/Node发送邮件/","excerpt":"","text":"安装NPM模块npm install nodemailer --save 简陋的实现const NodeMailer = require('nodemailer'); //@modules npm install nodemailer// 开启一个 SMTP 连接池let transporter = NodeMailer.createTransport(&#123; service: 'qq', post: 465, // SMTP 端口 secureConnection: true, // SSL auth: &#123; user: '309129685@qq.com', pass: 'xxxxxxxxxxxxx', // SMTP 授权码, 需要在邮箱设置中开启SMTP服务 &#125;&#125;);// 设置邮件内容let mailOptions = &#123; from: '309129685@qq.com', // 发件地址 to: 'chris_chen1997@163.com', // 收件地址 subject: 'Title', // 标题 text: 'Hello ChrisChen', // text | html 只能选择一种作为内容 // html: '&lt;h1&gt;Hello ChrisChen&lt;/h1&gt;'&#125;;// 发送邮件transporter.sendMail(mailOptions, function (err, info) &#123; if (err) throw err; console.log(info); transporter.close(); // 关闭连接池&#125;);","categories":[],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"https://ImChrisChen.Github.io/tags/NodeJS/"}]},{"title":"Mac个性化操作","slug":"Mac个性化操作","date":"2019-06-12T06:46:36.000Z","updated":"2021-05-18T15:53:59.385Z","comments":true,"path":"2019/06/12/Mac个性化操作/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/12/Mac个性化操作/","excerpt":"","text":"让Dock程序坞 即时自动显示和隐藏 (无延迟) 设置 defaults write com.apple.Dock autohide-delay -float 0 &amp;&amp; killall Dock 恢复 defaults delete com.apple.Dock autohide-delay &amp;&amp; killall Dock 设置使用任何来源都可以打开的应用sudo spctl --master-disable 显示隐藏桌面图标 显示桌面图标 defaults write com.apple.finder CreateDesktop -bool true; killall Finder 隐藏桌面图标 defaults write com.apple.finder CreateDesktop -bool false; killall Finder 让 Finder 显示完整路径defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES Mac 启动台图标大小调整1 、终端运行命令：10代表一行显示10个图标，几个可以自定义 defaults write com.apple.dock springboard-columns -int 10 2 、 设置完需要重新启动一下 启动台 killall Dock Mac结束进程lsof -i:&lt;端口号&gt; // 获取到对应的pidkill &lt;pid&gt;","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://ImChrisChen.Github.io/tags/Mac/"}]},{"title":"微信小程序强制更新","slug":"微信小程序强制更新","date":"2019-06-12T06:42:10.000Z","updated":"2021-05-18T15:53:59.390Z","comments":true,"path":"2019/06/12/微信小程序强制更新/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/12/微信小程序强制更新/","excerpt":"","text":"启动时更新 热启动：假如用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时无需重新启动，只需将后台态的小程序切换到前台，这个过程就是热启动； 冷启动：用户首次打开或小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动，即冷启动。 小程序没有重启的概念。 小程序每次冷启动时，都会检查是否有更新版本，如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。 注意: 发布版本的时候版本号也记得更新，可能导致有更新提示不生效 微信开发者工具中设置编译模式启动触发 下次编译时模拟更新 示例代码// 检查是否版本更新，在app.js里的onLaunch中调用即可checkUpdate() &#123; const updateManager = wx.getUpdateManager(); updateManager.onCheckForUpdate(function (res) &#123; // 请求完新版本信息的回调 console.log(\"是否有新版本：\" + res.hasUpdate); if (res.hasUpdate) &#123; // 小程序有新版本，会主动触发下载操作（无需开发者触发） updateManager.onUpdateReady(function () &#123; wx.showModal(&#123; title: '更新提示', content: '新版本已经准备好，是否重启应用？', success: function (res) &#123; if (res.confirm) &#123; // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启 wx.getUpdateManager().applyUpdate() &#125; &#125; &#125;) &#125;); // 小程序有新版本，会主动触发下载操作（无需开发者触发） updateManager.onUpdateFailed(function () &#123; // 新版本下载失败 wx.showModal(&#123; title: '提示', content: '检查到有新版本，但下载失败，请检查网络设置', showCancel: false, &#125;) &#125;); &#125; &#125;);&#125;,","categories":[],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ImChrisChen.Github.io/tags/微信小程序/"}]},{"title":"Git常用命令","slug":"Git常用命令","date":"2019-06-12T06:32:38.000Z","updated":"2021-05-18T15:53:59.384Z","comments":true,"path":"2019/06/12/Git常用命令/","link":"","permalink":"https://ImChrisChen.Github.io/2019/06/12/Git常用命令/","excerpt":"","text":"git三个分区 Git基本操作 操作 命令 将工作区的修改提交到暂存区 git add &lt;文件名&gt; 可用通配符 将暂存区的修改提交到当前分支 git commit -m &lt;注释&gt; 修改最后一次提交的注释信息 git commit —amend -m &lt;注释&gt; 显示有变更的文件 git status 查看修改差异 git diff 提交一个新的版本，并重写注释 git revert &lt;hash版本号&gt; 版本回退常用 回滚到指定版本 (慎用) git reset &lt;hash版本号&gt; 之前的提交记录会消失 把指定文件从暂存区撤销到工作区 git reset HEAD &lt;文件名&gt; 可用通配符 撤销工作区的修改 git checkout &lt;文件名&gt; 可用通配符代替 推送代码到远程分支 git push origin &lt;远程分支&gt; 加 -f 强推直接覆盖 远程仓库相关命令 操作 命令 检出仓库 git clone &lt;远程仓库地址&gt; 查看远程仓库 git remote -v 添加远程仓库 git remote add &lt;远程仓库名称&gt; &lt;远程仓库地址&gt; 删除远程仓库 git remote rm &lt;远程仓库名称&gt; 修改远程仓库 git remote set-url –push &lt;远程仓库名称&gt; &lt;远程仓库地址&gt; 拉取远程仓库 git pull &lt;远程仓库名称&gt; &lt;本地分支名称&gt; 推送远程仓库 git push &lt;远程仓库名称&gt; &lt;本地分支名称&gt;:&lt;远程分支名&gt; 分支相关命令 操作 命令 查看本地分支 git branch 查看远程分支 git branch -r 创建本地分支 git branch &lt;分支名称&gt; 切换分支 git checkout &lt;分支名称&gt; 切换/创建本地分支 git checkout -b &lt;分支名称&gt; 切换本地分支，没有则创建 删除本地分支 git branch -d &lt;分支名称&gt; 需要切换到其他分支 合并分支 git merge &lt;分支名称&gt; 当前分支和 &lt;分支名称&gt;合并 创建远程分支 git push origin &lt;本地分支名称&gt; 删除远程分支 git push origin :&lt;远程分支名称&gt; 版本(tag)操作相关命令 操作 命令 查看版本 git tag 创建版本 git tag [name] 删除版本 git tag -d [name] 查看远程版本 git tag -r 创建远程版本 git push origin [name] 本地版本push到远程 删除远程版本 git push origin :refs/tags/[name] 合并远程仓库的tag到本地 git pull origin –tags 上传本地tag到远程仓库 git push origin –tags 创建带注释的tag git tag -a [name] -m ‘yourMessage’","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://ImChrisChen.Github.io/tags/Git/"}]}],"categories":[{"name":"web安全","slug":"web安全","permalink":"https://ImChrisChen.Github.io/categories/web安全/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://ImChrisChen.Github.io/categories/计算机网络/"},{"name":"数据结构","slug":"数据结构","permalink":"https://ImChrisChen.Github.io/categories/数据结构/"},{"name":"设计模式","slug":"设计模式","permalink":"https://ImChrisChen.Github.io/categories/设计模式/"},{"name":"工程化","slug":"设计模式/工程化","permalink":"https://ImChrisChen.Github.io/categories/设计模式/工程化/"},{"name":"组件化","slug":"设计模式/工程化/组件化","permalink":"https://ImChrisChen.Github.io/categories/设计模式/工程化/组件化/"},{"name":"代码片段","slug":"代码片段","permalink":"https://ImChrisChen.Github.io/categories/代码片段/"},{"name":"工具配置","slug":"工具配置","permalink":"https://ImChrisChen.Github.io/categories/工具配置/"},{"name":"性能优化","slug":"性能优化","permalink":"https://ImChrisChen.Github.io/categories/性能优化/"},{"name":"解决问题相关","slug":"解决问题相关","permalink":"https://ImChrisChen.Github.io/categories/解决问题相关/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://ImChrisChen.Github.io/tags/nginx/"},{"name":"配置","slug":"配置","permalink":"https://ImChrisChen.Github.io/tags/配置/"},{"name":"Vue","slug":"Vue","permalink":"https://ImChrisChen.Github.io/tags/Vue/"},{"name":"代码片段","slug":"代码片段","permalink":"https://ImChrisChen.Github.io/tags/代码片段/"},{"name":"浏览器","slug":"浏览器","permalink":"https://ImChrisChen.Github.io/tags/浏览器/"},{"name":"服务器","slug":"服务器","permalink":"https://ImChrisChen.Github.io/tags/服务器/"},{"name":"Javascript","slug":"Javascript","permalink":"https://ImChrisChen.Github.io/tags/Javascript/"},{"name":"数据结构","slug":"数据结构","permalink":"https://ImChrisChen.Github.io/tags/数据结构/"},{"name":"HTTP","slug":"HTTP","permalink":"https://ImChrisChen.Github.io/tags/HTTP/"},{"name":"CSS","slug":"CSS","permalink":"https://ImChrisChen.Github.io/tags/CSS/"},{"name":"Http","slug":"Http","permalink":"https://ImChrisChen.Github.io/tags/Http/"},{"name":"WebComponents","slug":"WebComponents","permalink":"https://ImChrisChen.Github.io/tags/WebComponents/"},{"name":"Antd","slug":"Antd","permalink":"https://ImChrisChen.Github.io/tags/Antd/"},{"name":"Typescript","slug":"Typescript","permalink":"https://ImChrisChen.Github.io/tags/Typescript/"},{"name":"React","slug":"React","permalink":"https://ImChrisChen.Github.io/tags/React/"},{"name":"NPM","slug":"NPM","permalink":"https://ImChrisChen.Github.io/tags/NPM/"},{"name":"npm","slug":"npm","permalink":"https://ImChrisChen.Github.io/tags/npm/"},{"name":"Nginx","slug":"Nginx","permalink":"https://ImChrisChen.Github.io/tags/Nginx/"},{"name":"Mac","slug":"Mac","permalink":"https://ImChrisChen.Github.io/tags/Mac/"},{"name":"命令行","slug":"命令行","permalink":"https://ImChrisChen.Github.io/tags/命令行/"},{"name":"微信小程序/小游戏","slug":"微信小程序-小游戏","permalink":"https://ImChrisChen.Github.io/tags/微信小程序-小游戏/"},{"name":"git","slug":"git","permalink":"https://ImChrisChen.Github.io/tags/git/"},{"name":"css","slug":"css","permalink":"https://ImChrisChen.Github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://ImChrisChen.Github.io/tags/html/"},{"name":"工具类","slug":"工具类","permalink":"https://ImChrisChen.Github.io/tags/工具类/"},{"name":"Axios","slug":"Axios","permalink":"https://ImChrisChen.Github.io/tags/Axios/"},{"name":"Git","slug":"Git","permalink":"https://ImChrisChen.Github.io/tags/Git/"},{"name":"webstorm","slug":"webstorm","permalink":"https://ImChrisChen.Github.io/tags/webstorm/"},{"name":"微信小程序","slug":"微信小程序","permalink":"https://ImChrisChen.Github.io/tags/微信小程序/"},{"name":"前端优化","slug":"前端优化","permalink":"https://ImChrisChen.Github.io/tags/前端优化/"},{"name":"NodeJS","slug":"NodeJS","permalink":"https://ImChrisChen.Github.io/tags/NodeJS/"}]}