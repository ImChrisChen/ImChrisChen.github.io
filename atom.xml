<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yo Man!</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ImChrisChen.Github.io/"/>
  <updated>2021-06-25T05:47:45.262Z</updated>
  <id>https://ImChrisChen.Github.io/</id>
  
  <author>
    <name>ChrisChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置vim下nginx语法高亮</title>
    <link href="https://ImChrisChen.Github.io/2021/06/25/%E9%85%8D%E7%BD%AEvim%E4%B8%8Bnginx%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE/"/>
    <id>https://ImChrisChen.Github.io/2021/06/25/配置vim下nginx语法高亮/</id>
    <published>2021-06-25T05:31:37.000Z</published>
    <updated>2021-06-25T05:47:45.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载vim高亮语法配置"><a href="#下载vim高亮语法配置" class="headerlink" title="下载vim高亮语法配置"></a>下载vim高亮语法配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cd ~/.vim/syntax/</span><br><span class="line"></span><br><span class="line">wget http://www.vim.org/scripts/download_script.php?src_id=14376 -O nginx.vim</span><br></pre></td></tr></table></figure><h2 id="修改filetype-vim-配置"><a href="#修改filetype-vim-配置" class="headerlink" title="修改filetype.vim 配置"></a>修改filetype.vim 配置</h2><p>在 <code>~/.vim/filetype.vim</code> 文件中添加如下配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot; nginx </span><br><span class="line">au BufNewFile,BufRead /usr/local/etc/nginx setf nginx</span><br></pre></td></tr></table></figure><p><code>/usr/local/etc/nginx</code> 为你的nginx路径</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载vim高亮语法配置&quot;&gt;&lt;a href=&quot;#下载vim高亮语法配置&quot; class=&quot;headerlink&quot; title=&quot;下载vim高亮语法配置&quot;&gt;&lt;/a&gt;下载vim高亮语法配置&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://ImChrisChen.Github.io/tags/nginx/"/>
    
      <category term="配置" scheme="https://ImChrisChen.Github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Vue 自定义指令封装数据埋点🐛</title>
    <link href="https://ImChrisChen.Github.io/2021/06/21/Vue-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E5%9F%8B%E7%82%B9/"/>
    <id>https://ImChrisChen.Github.io/2021/06/21/Vue-自定义指令封装数据埋点/</id>
    <published>2021-06-21T07:57:39.000Z</published>
    <updated>2021-06-21T13:11:18.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最小化实现"><a href="#最小化实现" class="headerlink" title="最小化实现"></a>最小化实现</h2><p>最小化实现 ，<code>inserted, 和bind的区别可以取官网看，不同的使用场景</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'collect'</span>, &#123;</span><br><span class="line">inserted (el,bindbing) &#123;</span><br><span class="line">        <span class="comment">// 执行自定义指令要做的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>collect</code> 表示自定义指令的名称   <code>bindbing.name</code></li><li><code>close_vip</code> 这部分表示自定义指令的参数  <code>bindbing.arg</code></li><li><code>.click .stop</code> 表示修饰符  <code>binding.modifiers.click, binding.modifiers.stop</code></li><li><code>{title: &quot;关闭弹窗&quot;}</code> 这部分表示 自定义指令的值.  <code>binding.value</code></li></ul><h2 id="Vue自定义指令设计"><a href="#Vue自定义指令设计" class="headerlink" title="Vue自定义指令设计"></a>Vue自定义指令设计</h2><p>Vue自定义指令其实就是html 的属性，通过给 Vue自定义指令也是 html属性的一种语法糖，所以自定义其实就是通过 html 标签属性的形式，通过一系列规则的封装成的一些特定功能，下面看看如何实现</p><p><strong>实现自定义指令需要弄明白一下几个问题</strong>。</p><ol><li>自定义指令使用的使用的多种方法，name，修饰符等等</li><li>自定义指令插件化开发，如何解耦合？</li></ol><h2 id="自定义指令编写"><a href="#自定义指令编写" class="headerlink" title="自定义指令编写"></a>自定义指令编写</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dw &#125; <span class="keyword">from</span> <span class="string">'@/utils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Collect</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    inserted(el, binding) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; value, arg, modifiers &#125; = binding;</span><br><span class="line">        <span class="keyword">let</span> &#123; click, show, prevent, stop &#125; = modifiers;     <span class="comment">// 自定义修饰符</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (show) &#123;</span><br><span class="line">            dw.onEvent(arg, value);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (click) &#123;</span><br><span class="line">            el.addEventListener(<span class="string">'click'</span>, event =&gt; &#123;</span><br><span class="line">                stop &amp;&amp; event.stopPropagation();</span><br><span class="line">                prevent &amp;&amp; event.preventDefault();</span><br><span class="line">                dw.onEvent(arg, value);</span><br><span class="line">            &#125;, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bind() &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    unbind(el, bingding) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; click = <span class="literal">false</span> &#125; = bingding.modifiers;</span><br><span class="line">        <span class="keyword">const</span> &#123; value &#125; = bingding;</span><br><span class="line">        <span class="keyword">if</span> (click) &#123;</span><br><span class="line">            el.removeEventListener(<span class="string">'click'</span>,() =&gt; &#123;</span><br><span class="line">COLLECT(value);</span><br><span class="line">            &#125;,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 导出的模块一定要有一个静态的 install的方法， Vue.use(module) 会执行到</span></span><br><span class="line">    <span class="keyword">static</span> install(Vue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行安装'</span>);</span><br><span class="line">        Vue.directive(<span class="string">'vascollect'</span>, <span class="keyword">new</span> Collect()); <span class="comment">// 这里也可以写成对象的形式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Vue-use安装"><a href="#使用Vue-use安装" class="headerlink" title="使用Vue.use安装"></a>使用Vue.use安装</h2><p>使用Vue.use的形式使用，使其Vue项目更加规范化</p><p><code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Collect <span class="keyword">from</span> <span class="string">'@/directives/collect'</span>;<span class="comment">// 自定义指令</span></span><br><span class="line">Vue.use(Collect) <span class="comment">// 注册自定义指令</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>通过collect点击时上报 数据埋点事件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button v-collect:close_vip.click.stop=&quot;&#123; title: &quot;关闭弹窗&quot;&#125; &quot;&gt;Submit&lt;/button&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最小化实现&quot;&gt;&lt;a href=&quot;#最小化实现&quot; class=&quot;headerlink&quot; title=&quot;最小化实现&quot;&gt;&lt;/a&gt;最小化实现&lt;/h2&gt;&lt;p&gt;最小化实现 ，&lt;code&gt;inserted, 和bind的区别可以取官网看，不同的使用场景&lt;/code&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://ImChrisChen.Github.io/tags/Vue/"/>
    
      <category term="代码片段" scheme="https://ImChrisChen.Github.io/tags/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>cookie和session</title>
    <link href="https://ImChrisChen.Github.io/2021/05/29/cookie%E5%92%8Csession/"/>
    <id>https://ImChrisChen.Github.io/2021/05/29/cookie和session/</id>
    <published>2021-05-29T07:49:50.000Z</published>
    <updated>2021-06-12T06:59:21.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie是在服务端返回数据的时候通过Set-Cookie这个header 设置到浏览器里面的一个内容，浏览器保存之后，在下一次同域的请求中，就会带上Cookie，这样就可以在一个用户的会话过程中，可以返回对应的用户的数据</p><p><strong>Cookie有几个特点</strong></p><ul><li>通过Set-Cookie 设置</li><li>下次请求会自动带上</li><li>键值对的形式，可以设置多个</li></ul><p><strong>Cookie的属性</strong></p><ul><li><p>通过max-age 和 expires 设置过期时间</p></li><li><p>Secure 只在 https 请求时发送</p></li><li><p>设置 HttpOnly 后 无法通过 document.cookie 访问</p><p>无法通过Javascript 去访问到，这样做是为了安全性，预防 <code>CSRF</code> 攻击 ( 跨站请求伪造 ) ，通过使用脚本注入，或者外部链接跳转等方式, 获取用户的登录信息<code>token</code> 从而达到入侵的目的，HttpOnly 禁止Javascript访问 cookie 可以很好的预防这类攻击</p></li></ul><p>Nginx 设置 Cookie</p><p>下面设置代表了看，设置了多个Cookie</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Set-Cookie <span class="string">"id=1;max-age=3"</span>;</span><br><span class="line"><span class="attribute">add_header</span> Set-Cookie <span class="string">"name=chris"</span>;</span><br><span class="line"><span class="attribute">add_header</span> Set-Cookie <span class="string">"age=18;HttpOnly"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一条 <code>id=123</code>的这条Cookie 过期时间为 3秒后</li><li>第二条cookie 则没有设置过期时间，默认为浏览器关闭，会话结束（会话Cookie）</li><li>第三条cookie 设置了HttpOnly 字段，在浏览器的Application 中是可以看到的，但是用document.cookie 访问不了</li></ol><p><img src="http://cdn.chrischen.top/blog/uOZo5U.png" alt></p><p>tips: <code>可以通过给主域名设置Cookie</code> 然后子域名访问，达到一个<strong>跨域访问Cookie</strong>的效果</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;p&gt;Cookie是在服务端返回数据的时候通过Set-Cookie这个header 设置到浏览器里面的一个内容，浏
      
    
    </summary>
    
      <category term="web安全" scheme="https://ImChrisChen.Github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="浏览器" scheme="https://ImChrisChen.Github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="服务器" scheme="https://ImChrisChen.Github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>记录这几天面试回答得不算很好的问题😮‍💨「 持续更新 」</title>
    <link href="https://ImChrisChen.Github.io/2021/05/26/%E8%AE%B0%E5%BD%95%E8%BF%99%E5%87%A0%E5%A4%A9%E9%9D%A2%E8%AF%95%E6%B2%A1%E6%9C%89%E5%9B%9E%E7%AD%94%E4%B8%8A%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://ImChrisChen.Github.io/2021/05/26/记录这几天面试没有回答上来的问题/</id>
    <published>2021-05-26T12:34:59.000Z</published>
    <updated>2021-06-12T06:59:21.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>找工作第三天了，线上线下面了有不少了 ，其中有部分的问题回答的不是很nice，用这篇文章来记录一下，再去剖析一番</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="lt-script-gt-lt-script-async-gt-lt-script-defer-gt-的区别分别是什么"><a href="#lt-script-gt-lt-script-async-gt-lt-script-defer-gt-的区别分别是什么" class="headerlink" title="&lt;script&gt; ,&lt;script async&gt; &lt;script defer&gt;  的区别分别是什么"></a><code>&lt;script&gt;</code> ,<code>&lt;script async&gt;</code> <code>&lt;script defer&gt;</code>  的区别分别是什么</h3><blockquote><p>在HTML中类似 <code>async</code>  和 <code>defer</code>，<code>checked</code> 等等 这种叫做 <strong>布尔属性</strong>，布尔属性的存在意味着 true 值，布尔属性的缺失意味着 false 值。</p></blockquote><p>当时不太了解 defer这个属性，现在做个对比</p><ul><li><code>&lt;script&gt;</code>不管是内部代码，还是 <code>src</code> 加载的远程代码，都会阻塞 <code>DOM</code> 的解析</li><li><code>&lt;script async&gt;</code>  （多个请求加载时顺序不能保证一致）<ul><li>内部代码：会阻塞 <code>DOM</code> 解析</li><li>远程代码：请求时不会阻塞， 执行代码时会阻塞</li></ul></li><li><code>&lt;script defer&gt;</code>  无论何时都不阻塞代码，触发 <code>DOMContentLoaded</code> 事件前执行</li></ul><table><thead><tr><th>script标签</th><th>JS执行顺序</th><th>是否阻塞解析 DOM</th></tr></thead><tbody><tr><td><code>&lt;script&gt;</code></td><td>HTML 中的顺序</td><td>阻塞</td></tr><tr><td><code>&lt;script async&gt;</code></td><td>网络请求返回顺序</td><td>有代码执行阻塞，没代码执行不阻塞</td></tr><tr><td><code>&lt;script defer&gt;</code></td><td>在HTML 中的顺序</td><td>不阻塞</td></tr></tbody></table><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="哪些属性可以触发BFC-？"><a href="#哪些属性可以触发BFC-？" class="headerlink" title="哪些属性可以触发BFC ？"></a>哪些属性可以触发BFC ？</h3><p>当时说了一些没太说清楚</p><p>列下几个常用的</p><ul><li>浮动元素： <code>float</code> 不为 <code>none</code></li><li>绝对定位元素： <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code> </li><li>行内快元素：<code>display</code> 属性为 inline-block</li><li>表格单元格为 <code>table-cell</code> 值 （table的默认值）</li></ul><h3 id="rem-如何计算-？"><a href="#rem-如何计算-？" class="headerlink" title="rem 如何计算 ？"></a>rem 如何计算 ？</h3><p>移动端没追问太多，移动端项目少</p><blockquote><p>rem 是一个相对单位</p></blockquote><p><code>layout-viewport (布局视口)  /  设计稿宽度</code></p><p><code>document.body.clientWidth / 750 * 基数 = Html fontSize</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">460</span>) &#123;<span class="comment">// 最大460宽度</span></span><br><span class="line">        a = <span class="number">460</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">320</span>) &#123;  <span class="comment">// 最小320宽度</span></span><br><span class="line">            a = <span class="number">320</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.style.fontSize = (a / <span class="number">750</span> * <span class="number">100</span>) + <span class="string">'px'</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>不过移动端适配都有方案处理好了，postcss-px2rem等</p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="Javascript实现帧动画-？"><a href="#Javascript实现帧动画-？" class="headerlink" title="Javascript实现帧动画 ？"></a>Javascript实现帧动画 ？</h3><p>当时一时没反应过来😢，后来才想起，不过这个API用的比较少</p><p><strong><code>window.requestAnimationFrame(callback)</code></strong>  它接受一个回调函数，该方法会在浏览器在下次重绘之前调用指定的回调函数更新动画</p><p><strong>该回调函数执行次数通常是每秒60次，但是在大多数浏览器中进行了优化，运行在后台标签页中或者是 <code>&lt;iframe/&gt;</code>  中会被暂停调用</strong></p><p>详细参考 👉🏻  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">window.requestAnimationFrame - Web API 接口参考 | MDN (mozilla.org)</a></p><h3 id="try-中写异步代码报错了，catch-中是否能捕获到？-为什么？"><a href="#try-中写异步代码报错了，catch-中是否能捕获到？-为什么？" class="headerlink" title="try 中写异步代码报错了，catch 中是否能捕获到？ 为什么？"></a>try 中写异步代码报错了，catch 中是否能捕获到？ 为什么？</h3><p>​    不能，因为JavaScript事件循环机制导致的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'1'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这段代码中，并不能捕获到错误，可以复制在浏览器控制台中去试试。</p><p>其原因就是在JavaScript的执行过程中，执行到第二行的时候（<code>setTimeout这个位置</code>），会把setTimeout中的回掉函数放入 任务队列，等到同步代码执行完成后，才回去执行队列中的任务，所以在 try 代码块执行完后，程序此时还没有报错，于是就不会走到 catch 里面，所以setTimeout 其实是最后才执行的，所以不会被捕获到，如下图 👎🏻</p><img src="http://cdn.chrischen.top/blog/xhr8ZF.png" style="zoom:80%;"><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>这个后面单独写一篇博客，这个问的太多了</p><h3 id="generator-的-迭代器中-next方法的参数怎么用？"><a href="#generator-的-迭代器中-next方法的参数怎么用？" class="headerlink" title="generator 的 迭代器中 next方法的参数怎么用？"></a>generator 的 迭代器中 next方法的参数怎么用？</h3><p>next 的参数会在generator 函数中用作 yield 值返回的结果（只在函数体里有效，不会影响到next.value的值）</p><p><strong>使用值调用<code>next</code>。 注意，第一次调用没有记录任何内容，因为生成器最初没有产生任何结果。</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">yield</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = generator();</span><br><span class="line">g.next(<span class="number">1</span>); </span><br><span class="line"><span class="comment">// "&#123; value: null, done: false &#125;"</span></span><br><span class="line"></span><br><span class="line">g.next(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// "&#123; value: null, done: false &#125;"</span></span><br></pre></td></tr></table></figure><h3 id="解释一下JavaScript的同步异步，宏任务和微任务-？"><a href="#解释一下JavaScript的同步异步，宏任务和微任务-？" class="headerlink" title="解释一下JavaScript的同步异步，宏任务和微任务 ？"></a>解释一下JavaScript的同步异步，宏任务和微任务 ？</h3><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="http哪些头可以设置强缓存和协商缓存？"><a href="#http哪些头可以设置强缓存和协商缓存？" class="headerlink" title="http哪些头可以设置强缓存和协商缓存？"></a>http哪些头可以设置强缓存和协商缓存？</h3><p>强缓存 ( 不会发起请求 )</p><ul><li>Cache-Control      </li><li>Expires  （过期时间）</li></ul><p>协商缓存 （发起请求校验，如果命中缓存则返回304）</p><ul><li>Last-Modified / If-Modified-Since （都是GMT格式的时间字符串，如何客户端和服务端时间不统一，可能会存在问题）</li><li>Etag / If-None-Match  （值由服务器生成唯一标识，如果文件有变化，这个值也会改变）</li></ul><p>Etag 就是为了解决，Last-Modified 可能会存在时间不一致的另一种策略。</p><p>优先级： <code>Cache-Control &gt; Expires &gt; Etag &gt; Last-Modified</code></p><h3 id="Cookie-中-httpOnly-的作用是什么-？"><a href="#Cookie-中-httpOnly-的作用是什么-？" class="headerlink" title="Cookie 中 httpOnly 的作用是什么 ？"></a>Cookie 中 httpOnly 的作用是什么 ？</h3><p>预防CSRF （跨站请求伪造）攻击，设置后的cookie字段，则通过JavaScript 访问不到（document.cookie）也就操作不了 从根本上解决问题😂</p><p><strong>但是可以通过浏览器调试工具Application 这一栏看到</strong></p><h3 id="CORS中预检请求中（Prefilight-request）的作用是什么-？"><a href="#CORS中预检请求中（Prefilight-request）的作用是什么-？" class="headerlink" title="CORS中预检请求中（Prefilight request）的作用是什么 ？"></a>CORS中预检请求中（Prefilight request）的作用是什么 ？</h3><p>个人理解：在发送一些不安全的请求之前，浏览器会自动的发送一个<code>options</code>请求，也是就 CORS 预检请求，从而获取服务端是否允许该跨域的请求，以及是否需要携带身份凭证，最终决定客户端是否能否跨域访问资源，来保障网站的安全</p><p>那么什么样的情况下不会触发呢？MDN把这些归类为简单请求（不会触发CORS 预检请求 ）</p><ul><li>使用下列方法之一：<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET" target="_blank" rel="noopener"><code>GET</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD" target="_blank" rel="noopener"><code>HEAD</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST" target="_blank" rel="noopener"><code>POST</code></a></li></ul></li><li>除了被用户代理自动设置的首部字段（例如 <code>Connection</code>，<code>User-Agent</code>）和在 Fetch 规范中定义为 禁用首部名称 的其他首部，允许人为设置的字段为 Fetch 规范定义的 对 CORS 安全的首部字段集合，该集合为：<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept" target="_blank" rel="noopener"><code>Accept</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language" target="_blank" rel="noopener"><code>Accept-Language</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Language" target="_blank" rel="noopener"><code>Content-Language</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type" target="_blank" rel="noopener"><code>Content-Type</code></a> （需要注意额外的限制）</li><li><code>DPR</code></li><li><code>Downlink</code></li><li><code>Save-Data</code></li><li><code>Viewport-Width</code></li><li><code>Width</code></li></ul></li><li><code>Content-Type</code>的值仅限于下列三者之一：（也就是html原生 form表单支持的数据类型）<ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul></li><li>请求中的任意<code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；<code>XMLHttpRequestUpload</code> 对象可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/upload" target="_blank" rel="noopener"><code>XMLHttpRequest.upload</code></a> 属性访问。</li><li>请求中没有使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noopener"><code>ReadableStream</code></a></li></ul><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="computed-和-watch的区别-？"><a href="#computed-和-watch的区别-？" class="headerlink" title="computed 和 watch的区别 ？"></a>computed 和 watch的区别 ？</h3><p>computed 只要有依赖的项更新了，就会重新计算，内部还有做缓存，去做对比，如果值上一次计算的值，和更新的值没有发生变化，也不会更新到页面上（适合在模版里面使用，减少DOM更新）</p><p>watch 只要是被监听的值有变化，就会立刻执行 （适合做数据的监听的逻辑处理）</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="class中哪些操作可以触发到-render-？"><a href="#class中哪些操作可以触发到-render-？" class="headerlink" title="class中哪些操作可以触发到 render ？"></a>class中哪些操作可以触发到 render ？</h3><ul><li>state更新</li><li>props更新</li><li>class的父组件更新，子组件也会更新</li><li>setState() 啥也不设置也会更新（只要调用了setState就会更新）</li></ul><h3 id="setState-是同步还是异步-？-内部机制-？"><a href="#setState-是同步还是异步-？-内部机制-？" class="headerlink" title="setState 是同步还是异步 ？ 内部机制 ？"></a>setState 是同步还是异步 ？ 内部机制 ？</h3><p>是异步的，执行setState 后不会立刻更新，而是把要更新的操作放入一个队列中</p><h3 id="React-的事件操作-和-原生事件有什么区别-？-合成事件-？"><a href="#React-的事件操作-和-原生事件有什么区别-？-合成事件-？" class="headerlink" title="React 的事件操作 和 原生事件有什么区别 ？ 合成事件 ？"></a>React 的事件操作 和 原生事件有什么区别 ？ 合成事件 ？</h3><h3 id="HOC-高阶组件是什么-？作用是什么-？"><a href="#HOC-高阶组件是什么-？作用是什么-？" class="headerlink" title="HOC 高阶组件是什么 ？作用是什么 ？"></a>HOC 高阶组件是什么 ？作用是什么 ？</h3><ul><li>高阶组件函数接收一个组件 作为参数</li><li>高阶组件必须输出一个新的组件</li></ul><p>更好的做代码分层复用，解决耦合等问题</p><h3 id="React中不用第三方库，如何组件通信？-（不用Mobx，Redux等）"><a href="#React中不用第三方库，如何组件通信？-（不用Mobx，Redux等）" class="headerlink" title="React中不用第三方库，如何组件通信？ （不用Mobx，Redux等）"></a>React中不用第三方库，如何组件通信？ （不用Mobx，Redux等）</h3><ol><li>Props  + 事件触发 （父子组件通信）</li><li>使用 ref 获取到对应React实例 直接操作其他组件的方法，属性，进行通信</li><li>Provide （ Mobx 也是使用从根组件开始注入的方式，实现状态下发 ）</li><li>Context （不好维护）</li></ol><p>tips： 项目大起来还是用Redux 和 Mobx 库去管理比较好</p><h2 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h2><h3 id="type-和-interface-的区别-？"><a href="#type-和-interface-的区别-？" class="headerlink" title="type 和 interface 的区别 ？"></a>type 和 interface 的区别 ？</h3><p>说了一些，没说全，补充下</p><ul><li>interface 可以描述class，type 不可以</li><li>interface 继承方式是 extends ，type 是用联合类型 &amp;</li><li>interface 只能描述对象和 class ，type可以描述任意数据类型 （数据类型可以，class不行）</li><li>interface 不能使用 in 关键字进行遍历，type 可以使用 [key in Types] 进行对象的key约束</li></ul><h3 id="keyof-如何使用-？"><a href="#keyof-如何使用-？" class="headerlink" title="keyof 如何使用 ？"></a>keyof 如何使用 ？</h3><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="说下webpack-的构建流程-？"><a href="#说下webpack-的构建流程-？" class="headerlink" title="说下webpack 的构建流程 ？"></a>说下webpack 的构建流程 ？</h3><ol><li>合并配置文件和参数，生成最终的配置文件 （如何有多个的话，例如：shell 脚本中的参数，Vue.config.js  等等） </li><li>从入口文件开始（ <code>entry</code>字段），递归加载出所有依赖文件，生成依赖树</li><li>根据loader 配置的规则转化对应的文件</li><li>plugin …</li><li>代码提取，公共模块，代码分离，等等</li><li>生成文件写入 output 字段配置的文件夹</li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="树节点操作的优化-？"><a href="#树节点操作的优化-？" class="headerlink" title="树节点操作的优化 ？"></a>树节点操作的优化 ？</h3><h3 id="堆栈是什么-？"><a href="#堆栈是什么-？" class="headerlink" title="堆栈是什么 ？"></a>堆栈是什么 ？</h3><h3 id="说下深度优先和广度遍历优先-？"><a href="#说下深度优先和广度遍历优先-？" class="headerlink" title="说下深度优先和广度遍历优先 ？"></a>说下深度优先和广度遍历优先 ？</h3><h3 id="whlie-循环遍历做树结构的优化-？"><a href="#whlie-循环遍历做树结构的优化-？" class="headerlink" title="whlie 循环遍历做树结构的优化 ？"></a>whlie 循环遍历做树结构的优化 ？</h3><h2 id="笔试题"><a href="#笔试题" class="headerlink" title="笔试题"></a>笔试题</h2><h3 id="手写一个-防抖函数"><a href="#手写一个-防抖函数" class="headerlink" title="手写一个 防抖函数"></a>手写一个 防抖函数</h3><p>当时直接写了思路，觉得在纸上写代码有点难受</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数</span></span><br><span class="line"><span class="comment"> * @param fn &#123;function&#125;</span></span><br><span class="line"><span class="comment"> * @param delay &#123;number&#125;</span></span><br><span class="line"><span class="comment"> * @return &#123;(function(...[*]): void)|*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 这里使用 普通函数，this可以执行到本身</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果有 timer 说明已经已经触发倒计时了,则清掉倒计时，重新定时</span></span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 倒计时开始，</span></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn.call(<span class="keyword">this</span>, ...args);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="还有算法的笔试题"><a href="#还有算法的笔试题" class="headerlink" title="还有算法的笔试题"></a>还有算法的笔试题</h3><p>刚开始没看懂，后来他和解释了一波题意，然后马上就讲出思路来了，面试官表示比较满意，后来面试评价说我，反应灵活。。。😂，好吧</p><h2 id="性能优化篇"><a href="#性能优化篇" class="headerlink" title="性能优化篇"></a>性能优化篇</h2><h3 id="说一下你知道的web性能指标"><a href="#说一下你知道的web性能指标" class="headerlink" title="说一下你知道的web性能指标"></a>说一下你知道的web性能指标</h3><p>​    当时脑子抽了，说了一些，没太全，实际上就是问的，从浏览器输入URL到页面渲染这个过程中的一些指标啊。。。😂</p><ul><li>网络层<ul><li>重定向时间 （浏览器先检查本地是否有标记过，该URL 有被永久的重定向 httpCode 301）</li><li>DNS解析时间 （是域名的话，会递归的去解析拿到IP地址）</li><li>TCP 完成握手时间 （拿到IP后，开始于服务器建立TCP连接，中间会有三次握手过程）</li><li>HTTP请求响应时间  （三次握手成功后，HTTP开始发送请求，然后响应数据）</li></ul></li><li>应用层<ul><li>DOM解析时间 （获取到HTML后，浏览器开始解析）</li><li>Script 脚本加载时间（ 如果DOM中包含了script，则会执行脚本）</li><li>onload 时间 （整个页面加载完成后，包括DOM 和 CSS ，Javascript 全局加载完成，比如JS阻塞，Image 的src 图片下载完成才触发onload事件，亲测）</li><li>pageload （页面完全加载是时间）</li></ul></li></ul><h3 id="PNG，JPG，GIF，WEBP等图片格式有什么不一样，分别用于哪些场景？"><a href="#PNG，JPG，GIF，WEBP等图片格式有什么不一样，分别用于哪些场景？" class="headerlink" title="PNG，JPG，GIF，WEBP等图片格式有什么不一样，分别用于哪些场景？"></a>PNG，JPG，GIF，WEBP等图片格式有什么不一样，分别用于哪些场景？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;找工作第三天了，线上线下面了有不少了 ，其中有部分的问题回答的不是很nice，用这篇文章来记录一下，再去剖析一番&lt;/p&gt;
&lt;h2 id=&quot;H
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ImChrisChen.Github.io/tags/Javascript/"/>
    
      <category term="数据结构" scheme="https://ImChrisChen.Github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="HTTP" scheme="https://ImChrisChen.Github.io/tags/HTTP/"/>
    
      <category term="CSS" scheme="https://ImChrisChen.Github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Object.defineProperty VS Proxy 以及在Vue3中的变化 ⚖️</title>
    <link href="https://ImChrisChen.Github.io/2021/05/22/Object-defineProperty%E5%92%8CProxy%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://ImChrisChen.Github.io/2021/05/22/Object-defineProperty和Proxy的区别/</id>
    <published>2021-05-22T12:22:21.000Z</published>
    <updated>2021-05-23T14:38:32.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一提到 <code>Object.defineProperty</code> 搞前端的应该都会想起数据响应式，Vue2 数据响应式主要原理是通过的<code>Object.defineProperty</code>去实现的，Vue3是则使用浏览器原生的 <code>Proxy</code> 方法，同样是实现数据相应是，这两组API有什么不一样的吗？通过这篇文章给大家分析下👇🏻</p><h2 id="Object-defineProperty-VS-Proxy"><a href="#Object-defineProperty-VS-Proxy" class="headerlink" title="Object.defineProperty VS Proxy"></a>Object.defineProperty VS Proxy</h2><p><code>Object.defineProperty</code> 方法会在一个对象上定义一个新属性，或者修改一个对象的现有属性并返回对象</p><p>它提供了一些 <strong>约束对象操作的</strong> 属性 以及  set，get 方法，因此Object.defineProperty 监听的是对象中的属性，而和<code>Proxy</code>不同的是 <code>new Proxy</code> 时传入一个对象，它内部直接监听了整个对象的操作行为，因此可以得出一下结论：</p><blockquote><p><code>Object.defineProperty</code> 监听的是对象的属性</p><p><code>Proxy</code> 监听的是整个对象</p></blockquote><p>由于<code>Object.defineProperty</code> 监听的是属性，当递归一个深层结构的对象的时候，数组里层的对象就不能遍历到了（因为<code>Object.defineProperty</code>方法不适用于数组) ，而Proxy能代理数组，所以从根源生解决了问题<code>Object.defineProperty</code> 代理的目标是对象上的属性，属性新增和删除也就监听不到了（handlers 中只有get，set方法）</p><p>以下方法在<code>Object.defineProperty</code> 中不能被监听到</p><blockquote><p> <code>push</code>，<code>pop</code>，<code>shift</code>，<code>unshift</code>，<code>sort</code>，<code>reverse</code>，<code>splice</code></p></blockquote><p>Object.defineProperty的缺陷，由上得出结论</p><blockquote><p><code>Object.defineProperty</code> 不能监听数组的增删改操作</p><p><code>Object.defineProperty</code> 无法监听属性的新增和删除</p></blockquote><blockquote><p><code>Object.defineProperty</code> 是对象的方法，因此只要有Javascript的地方它基本都能支持（IE9以下就不支持了）</p><p>而 Proxy 直接不支持 IE …</p><p>Proxy作为新标准将受到浏览器厂商重点持续的性能优化</p></blockquote><h2 id="在Vue3中的变化"><a href="#在Vue3中的变化" class="headerlink" title="在Vue3中的变化"></a>在Vue3中的变化</h2><ol><li><p>Vue2数据驱动是使用的Object.defineProperty 去递归监听对象的，Vue3则是用的 Proxy 代理</p></li><li><p>Vue2是一次性递归完data对象，Vue3 是用Proxy 是在调用属性时并且值时<code>object</code>时才递归</p><p>源码 <code>vue-next/packages/reactivity/src/baseHandlers.ts</code>  127行</p></li></ol><img src="http://cdn.chrischen.top/blog/4y3vnW.png" style="zoom:33%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一提到 &lt;code&gt;Object.defineProperty&lt;/code&gt; 搞前端的应该都会想起数据响应式，Vue2 数据响应式主要原理是
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ImChrisChen.Github.io/tags/Javascript/"/>
    
      <category term="Vue" scheme="https://ImChrisChen.Github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 内容安全策略 - Content-Security-Policy</title>
    <link href="https://ImChrisChen.Github.io/2021/05/22/Http-%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5-Content-Security-Policy/"/>
    <id>https://ImChrisChen.Github.io/2021/05/22/Http-内容安全策略-Content-Security-Policy/</id>
    <published>2021-05-22T08:32:53.000Z</published>
    <updated>2021-06-12T06:59:21.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天写下如何避免 <code>XSS</code> 跨站脚本攻击，以及CSP的使用</p><h2 id="内容安全策略（CSP）是什么？"><a href="#内容安全策略（CSP）是什么？" class="headerlink" title="内容安全策略（CSP）是什么？"></a>内容安全策略（CSP）是什么？</h2><p>内容安全策略是一个对Web网站的安全层，用于检测并削弱某些特定类型的攻击，数据注入攻击等，无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的攻击手段。</p><p>简单理解，<code>CSP</code>其实就是白名单制度，开发者明确告诉客户端，哪些资源可以被允许加载执行</p><p><code>CSP</code> 大大增强了网页的安全性。攻击者即使发现了漏洞，也没法注入脚本，除非还控制了一台列入了白名单的可信主机。</p><p><code>CSP</code> 被设计成完全向后兼容，老版本的<code>CSP</code> 字段为 <code>X-Content-Security-Policy</code></p><p>默认为网页内容使用标准的同源策略。如果网站不提供 <code>CSP</code> 头部，浏览器也使用标准的同源策略。</p><p>下面说下 <code>CSP</code> 如何开启👇🏻</p><h2 id="限制参数"><a href="#限制参数" class="headerlink" title="限制参数"></a>限制参数</h2><p>下面选项限制各类资源的加载，主要分为以下两种</p><ul><li><p><code>default-scr</code> 限制全局，所有根据链接加载的东西都会被限制（优先级最高）</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src 'self'#设置各项的默认值</span><br></pre></td></tr></table></figure></li><li><p>制定资源类型</p><ul><li><code>content-src</code>   所有请求资源限制 ( <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/OverView" target="_blank" rel="noopener">HTTP</a> ,<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noopener">WebSocket</a> , <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource" target="_blank" rel="noopener">EventSource</a> 等)</li><li><code>script-src</code>       外部脚本</li><li><code>img-src</code>           图片资源</li><li><code>style-src</code>         外部CSS</li><li><code>font-src</code>          字体文件</li><li><code>worker-src</code>     worker脚本</li><li><code>frame-src</code>       嵌入的外部资源（比如<code>&lt;frame&gt;、&lt;iframe&gt;、&lt;embed&gt;和&lt;applet&gt;</code>）</li><li><code>manifest-src</code>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/Manifest" target="_blank" rel="noopener">Manifest</a> 文件 （WebApp）</li></ul></li><li><p>其他限制</p><p>限制了一些其他的安全规范，也放在了CSP里面</p><ul><li><code>block-all-mixed-content</code>   HTTPS 网页不得加载 HTTP 资源（浏览器已经默认开启）</li><li><code>upgrade-insecure-requests</code> 自动将网页上所有加载外部资源的 HTTP 链接换成 HTTPS 协议</li><li><code>plugin-types</code>     限制可以使用的插件格式</li><li><code>sandbox</code>  浏览器行为的限制，比如不能有弹出窗口等</li></ul><p>上面资源类型一下比较通用的， 其中还包含 font-src，frame-src，media-src等等，只要是可以通过外链形式加载的几乎资源都可以被限制</p></li></ul><h2 id="参数选项"><a href="#参数选项" class="headerlink" title="参数选项"></a>参数选项</h2><p>每个选项可以设置一下这几项</p><ul><li><p>主机名         <code>chrisorz.cn</code>   <code>https://chrisorz.cn:443</code>    (指定端口)</p></li><li><p>路径             <code>blog.chrisorz.cn/api/</code></p></li><li><p>通配符         <code>*.chrisorz.cn</code>      <code>*://chrisorz.cn:*</code>  ( 所有协议，所有端口)</p></li><li><p>协议名         <code>http:</code>  <code>https:</code>  <code>file:</code>  <code>stp:</code></p></li><li><p>关键字      </p><ul><li><code>&quot;none&quot;</code>     禁止加载任何外部资源 需要引号</li><li><code>&quot;self&quot;</code>      当前域名，需要引号</li></ul></li></ul><p>通过参数和参数选项就可以实现整条完整的规则了</p><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p>每个规则可以指定一个或者多个选限，如果有多个则用<code></code>空格分开</p><p>每条规则用<code>;</code>结尾 例如:</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">Content-Security-Policy: "img-src cdn.chrischen.top cdn.chrisorz.cn;</span><br><span class="line">          script-src 'self';</span><br><span class="line">      style-src 'self';</span><br><span class="line">      ";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，CSP做了如下配置</p><ul><li>图片：只能信任 <code>cdn.chrischen.top</code> <code>cdn.chrisorz.cn</code>这两个域名加载的资源</li><li>脚本：只信任本域名下的脚本</li><li>样式：只信任本域名下的样式</li></ul><h2 id="开启CSP的两种方式"><a href="#开启CSP的两种方式" class="headerlink" title="开启CSP的两种方式"></a>开启CSP的两种方式</h2><ol><li>通过配置 <code>HTTP</code> 头信息的 <code>Content-Security-Policy</code> 字段 （服务器）</li></ol><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 不能使用行内script只能从http或者https中使用外链</span></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">"Content-Security-Policy"</span> <span class="string">"default-src http: https:"</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写了个Demo，nginx上配置了 <code>add_header &quot;Content-Security-Policy&quot; &quot;default-src http: https:&quot;</code>后，可以看到内嵌式的script 代码已经不生效了，网页上没有任何的改变</p><img src="http://cdn.chrischen.top/blog/6eK5NS.png" style="zoom:33%;"><p>同样CSS也是, 行内样式和内嵌样式都被拦截掉了</p><img src="http://cdn.chrischen.top/blog/PTgjDw.png" style="zoom:33%;"><ol start="2"><li><code>&lt;meta&gt;</code> 标签设置</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-security-policy"</span> <span class="attr">content</span>=<span class="string">"style-src http: https:"</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;meta/&gt;</code>属性设置后也是一样的效果，这里就不贴图了</p><p>这里只是做一个演示效果，实际生产环境中一般不会这样设置 <code>Content-Security-Polity</code> ，生产环境中一般会有多域名，根据实际业务去进行可视化的配置，例如：</p><ul><li>静态资源上CDN</li><li>注入百度统计，Google统计等脚本</li><li>后端多域名的API（微服务更甚之，可能一个项目调7，8个域名，不过可以通过通配符去解决） </li><li>等等</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSP 可以避免 <code>XSS</code> 攻击</p><p>CSP 的设置分为两种</p><ul><li>客户端 <code>meta</code> 标签</li><li>服务端 响应头 </li></ul><p><strong>无论是客户端，还是服务端设置，最终生效的CSP 安全策略是权限范围最小的那个</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天写下如何避免 &lt;code&gt;XSS&lt;/code&gt; 跨站脚本攻击，以及CSP的使用&lt;/p&gt;
&lt;h2 id=&quot;内容安全策略（CSP）是什么？&quot;
      
    
    </summary>
    
      <category term="web安全" scheme="https://ImChrisChen.Github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Http" scheme="https://ImChrisChen.Github.io/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>Vue3源码解读 - 响应式数据原理</title>
    <link href="https://ImChrisChen.Github.io/2021/05/22/Vue3%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86/"/>
    <id>https://ImChrisChen.Github.io/2021/05/22/Vue3源码解读-响应式数据原理/</id>
    <published>2021-05-21T22:09:33.000Z</published>
    <updated>2021-06-21T08:06:01.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue3已经出来几个月了，API几天就上手了，想学习更深层次的东西还是的看看源码</p><h2 id="从Vue创建实例开始"><a href="#从Vue创建实例开始" class="headerlink" title="从Vue创建实例开始"></a>从Vue创建实例开始</h2><p>Vue3创建实例是用的 <code>Vue.createApp</code> 方法，先去源码中找到 createApp，看看它做了如何处理</p><ol><li>packages/vue/src/index.ts  Vue包入口文件  -&gt;</li><li>packages/runtime-dom/src/index.ts  57行</li></ol><h2 id="Vue-createApp做了啥？"><a href="#Vue-createApp做了啥？" class="headerlink" title="Vue.createApp做了啥？"></a>Vue.createApp做了啥？</h2><h3 id="创建app实例"><a href="#创建app实例" class="headerlink" title="创建app实例"></a>创建app实例</h3><p>通过 createRenderer 创建实例 调用createApp 方法生成 app 实例</p><h3 id="定义-app-mount-方法"><a href="#定义-app-mount-方法" class="headerlink" title="定义 app.mount 方法"></a>定义 app.mount 方法</h3><p>在mount方法中，又做了以下几件事情</p><ol><li><p>通过app.mount传入的selector，获取到DOM节点，用作Vue挂载的根节点</p></li><li><p>获取模版，如果createApp有传入 render,template,就使用它们作为模版，否则就使用根节点的innerHTML作为模版</p></li><li><p>调用mount 如果没有挂在过，开始挂载</p><p><strong>在有在第一次渲染会走mount，以后更新都是走的patch对比 的逻辑</strong></p></li><li><p>挂载成功后返回一个代理对象，里面包含了 data 和 setup方法return的值，如果两个方法的return的值有冲突，则会优先使用setup中的值</p><img src="http://cdn.chrischen.top/blog/截屏2021-05-22 上午8.23.39.png" style="zoom:50%;"></li></ol><img src="http://cdn.chrischen.top/blog/截屏2021-05-22 上午8.24.06.png" style="zoom:50%;"><p>可以看到定义两个一样的 <code>title</code>  属性已经被覆盖了，而 hd 只在data中定义 setup中没有定义就不存在覆盖的问题，所以对于模版属性 <strong>setup的优先级是要高于data</strong></p><h2 id="Vue3数据更新操作"><a href="#Vue3数据更新操作" class="headerlink" title="Vue3数据更新操作"></a>Vue3数据更新操作</h2><p>源码查找 packages/reactivity/src/reactive.ts  88行</p><ol><li>定义reactive方法（用户调用执行）</li><li>使用<code>new Proxy</code>创建代理对象 createReactiveObject, get,set在</li><li>在get中收集依赖</li></ol><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Vue3已经出来几个月了，API几天就上手了，想学习更深层次的东西还是的看看源码&lt;/p&gt;
&lt;h2 id=&quot;从Vue创建实例开始&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://ImChrisChen.Github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>http客户端get和post详解以及区别🧐</title>
    <link href="https://ImChrisChen.Github.io/2021/05/21/http%E4%B8%ADget%E5%92%8Cpost%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://ImChrisChen.Github.io/2021/05/21/http中get和post的区别/</id>
    <published>2021-05-20T19:46:59.000Z</published>
    <updated>2021-06-12T06:59:21.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这应该算是一个高频面试题了吧，来来输出一下… 什么是http，为何要使用它之类的就不讲了.. </p><p>​    尽可能写详细点吧，不然一个表格就搞定了</p><hr><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="语义不通"><a href="#语义不通" class="headerlink" title="语义不通"></a>语义不通</h3><p>最直观的就是语义不同了</p><p>说到语义，http客户端在当时设计这些API的时候（我没去参与设计过，我猜测的哈哈哈[狗头]），也是有一套规范的，当然这个规范不是强约束，你不按照这个语言规则来，你的程序也能跑</p><p>http不同方法代表的语义，分别对应来CURD的4个操作 RESUful API</p><ul><li>GET 在服务器检索某个资源</li><li>POST 在服务器创建资源</li><li>PUT 在服务器更改资源状态或对其进行更新</li><li>DELETE 在服务器删除某个资源</li></ul><p>RESUful API 风格就是遵循的http的语义化去设计的</p><h2 id="参数传递形式不一样"><a href="#参数传递形式不一样" class="headerlink" title="参数传递形式不一样"></a>参数传递形式不一样</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>GET请求的参数是拼接在URL后面的，通过 <code>= &amp;符号进行分割</code>  <code>url?key1=value2&amp;key2=value2</code></p><p>例如: <code>http://chrischen.top/api?id=10&amp;name=chris</code> </p><p>服务端获取参数需要从 request中的 query 字段去获取</p><p>由于get参数都是明文显示，所以例如身份证号码，用户名密码，这类敏感信息是不应该用get去请求的</p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>post请求的参数则会包含在请求体中，通常服务端用request中的 body字段去获取的，</p><p>而且发送post请求传递参数的内容格式（content-type）也是不一样的，既然聊到content-type，下面就多写点</p><p><strong>在响应中</strong>: Content-Type标头告诉客户端实际返回的内容的内容类型。浏览器会在某些情况下进行MIME查找，并不一定遵循此标题的值; 为了防止这种行为，可以将标题 [<code>X-Content-Type-Options</code>] 设置为<strong>nosniff</strong></p><p><strong>在请求中</strong>: 在 post 或 put 请求，客户端告诉服务器实际发送的数据类型 通过content-type去设置发送的数据类型</p><p><strong>常用的POST/PUT请求数据类型</strong></p><p>更多 请求类型响应类型具体可参考 👉🏻  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types#重要的mime类型" target="_blank" rel="noopener">MIME 类型 - HTTP | MDN (mozilla.org)</a></p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;id:123,name:'chris'&#125;</span></span><br><span class="line"><span class="attribute">Content</span>-Type: application/json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// id=123&amp;name=chris</span></span><br><span class="line"><span class="attribute">Content</span>-Type: application/x-www-form-urlencoded;</span><br></pre></td></tr></table></figure><h2 id="幂等"><a href="#幂等" class="headerlink" title="幂等"></a>幂等</h2><p>​    GET请求是幂等的，POST请求不幂等</p><h4 id="什么是幂等？"><a href="#什么是幂等？" class="headerlink" title="什么是幂等？"></a>什么是幂等？</h4><p>一个HTTP方法是<strong>幂等</strong>的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外)</p><p>下面几种方法是幂等</p><ul><li>GET</li><li>HEAD</li><li>PUT</li><li>DELETE</li></ul><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这应该算是一个高频面试题了吧，来来输出一下… 什么是http，为何要使用它之类的就不讲了.. &lt;/p&gt;
&lt;p&gt;​    尽可能写详细点吧，不
      
    
    </summary>
    
      <category term="计算机网络" scheme="https://ImChrisChen.Github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Http" scheme="https://ImChrisChen.Github.io/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现一个链表😼 - 数据结构</title>
    <link href="https://ImChrisChen.Github.io/2021/05/20/JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://ImChrisChen.Github.io/2021/05/20/JavaScript实现一个链表-数据结构/</id>
    <published>2021-05-20T06:10:45.000Z</published>
    <updated>2021-05-22T20:39:28.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在找工作，然后看到boss直聘的论坛上，一个前端招聘者在抱怨招不到合适的人，面了一大堆人，工作2-3年的，用JavaScript实现一个链表都寥寥无几，都没有聊下去的欲望….</p><p>所以在这了准备在写这篇博客，表明我实现过哈哈哈😂，抖个机灵，毕竟自己之前也是面试官，喜欢出一些开放型的题目去考察面试者，其实我看来这位面试官考察的这个问题，除了考察这个问题本身，更多的是看你的<strong>分析问题的能力，和抽象思维</strong></p><p>下面就来分析下如何用JavaScript实现一个链表</p><hr><h2 id="链表是什么？"><a href="#链表是什么？" class="headerlink" title="链表是什么？"></a>链表是什么？</h2><p>线性表的链式存储表示的特点是用一组任意的存储单元<strong>存储线性表</strong>的数据元素（这组存储单元可以是连续的，也可以是不连续的）。因此，为了表示每个数据元素与其直接后继数据元素 之间的逻辑关系</p><p>上面是百度百科的解释，我画了一张图让大家更便于理解</p><p>如果用生活中的例子代替火车就是最抽象的例子</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top/blog/re6YO8.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>每一个节点包含自己外，还包含一个指针，这个指针可以指向到下一个节点，形成一种，以此类推，形成的一个链式结构，就叫链表</p><p>链表还分为</p><ul><li><p>单向链表</p><p>每个节点包含一个指针，指向下一个节点</p></li><li><p>双向链表</p><p>每一个节点有两个指针，一个指向上一个节点，一个指向到下一个节点</p></li><li><p>循环链表</p><p>把单向链表的最后一个指针从Null改成指向链表头，就形成了循环链表</p></li></ul><p>知道链表是什么后，下面来分析一下如何用JavaScript实现一个单链表</p><h2 id="JavaScript如何实现链表？"><a href="#JavaScript如何实现链表？" class="headerlink" title="JavaScript如何实现链表？"></a>JavaScript如何实现链表？</h2><p>首先，链表是基于一个个节点来组装实现的，首先我们需要创建一个辅助类来实现</p><p>其次，由于JavaScript没有指针的概念，我们在实现节点的时候需要用对象的属性去模拟指针</p><p>然后，我们要知道链表都有哪些API，如何去操作链表，然后再去逐步的实现这些方法</p><p>最后整理出来需要哪些功能</p><ol><li>实现辅助类 Node，模拟链表中的节点<ol><li>节点属性的：本书节点</li><li>节点的属性：next指向</li></ol></li><li>链表类的API<ol><li>getHeader 获取链表头</li><li>append 向链表中追加元素</li><li>insert 向链表中的某一个位置插入元素</li><li>removeAt 删除链表中的某一个元素</li><li>indexOf 查询链表中是否有这个元素</li></ol></li></ol><p>捋清楚这个整体思路后，下面按照这个大纲来实现</p><h2 id="Node辅助类实现"><a href="#Node辅助类实现" class="headerlink" title="Node辅助类实现"></a>Node辅助类实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(item) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = item;<span class="comment">// 节点内容</span></span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;<span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表类的实现"><a href="#链表类的实现" class="headerlink" title="链表类的实现"></a>链表类的实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    head = <span class="literal">null</span>;</span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListedList</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    head = <span class="literal">null</span>;<span class="comment">// 链表头</span></span><br><span class="line">    length = <span class="number">0</span><span class="comment">// 链表长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 追加节点</span></span><br><span class="line"><span class="comment">     * @param item &#123; Node &#125; 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    append(item) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(item);      <span class="comment">// 创建一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.head) &#123;</span><br><span class="line">            <span class="comment">// 有head头则遍历到获取到最后一个节点，把next指向新追加的节点</span></span><br><span class="line">            <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.next = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 无head头，则直接把head头替换为新的节点</span></span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 追加成功后，链表的长度加一</span></span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向链表中的某一个位置插入元素</span></span><br><span class="line"><span class="comment">     * @param position &#123; Number &#125;</span></span><br><span class="line"><span class="comment">     * @param item &#123; Node &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    insert(position, item) &#123;</span><br><span class="line">        <span class="comment">// 边界判断 , 防止 position 越界</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt; <span class="keyword">this</span>.length) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(item);      <span class="comment">// 创建一个节点</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 插入的位置是head头前面</span></span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">                <span class="keyword">this</span>.head = node;           <span class="comment">// 把head替换为新节点</span></span><br><span class="line">                node.next = current;        <span class="comment">// 把新节点的next指向原来的head节点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 其他位置，则需要遍历链表获取到对应到插入的位置</span></span><br><span class="line"><span class="comment">                 * 思路: 1. 通过positon获取到上一个节点和下一个节点</span></span><br><span class="line"><span class="comment">                 *       2. 把上一个节点的next指向到新节点</span></span><br><span class="line"><span class="comment">                 *       3. 把新节点的next指向到下一个节点</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">let</span> previous = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span> (index &lt; position) &#123;</span><br><span class="line">                    previous = current;</span><br><span class="line">                    current = current.next;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                previous.next = node;</span><br><span class="line">                node.next = current;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.length++;              <span class="comment">// 插入成功后，链表的长度加1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'position的值越界了'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="removeAt"><a href="#removeAt" class="headerlink" title="removeAt"></a>removeAt</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过位置删除节点</span></span><br><span class="line"><span class="comment"> * @param position</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    removeAt(position) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 思路:</span></span><br><span class="line"><span class="comment">         * 1. 通过position 遍历链表和 找到上一个元素和当前元素</span></span><br><span class="line"><span class="comment">         * 2. 把上一个元素的next指向到当前元素的next (也就是当前元素的下一个元素)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// postion越界判断,保证传入的位置是正确的</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt; <span class="keyword">this</span>.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">                <span class="keyword">this</span>.head = current.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                let &#123; current, previous &#125; = this.#getPrevAndCurrentNode(position);</span><br><span class="line">                previous.next = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'position的值越界了'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length--;      <span class="comment">// remove掉后，链表长度减1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过节点找到 position</span></span><br><span class="line"><span class="comment"> * @param item &#123; Node &#125;</span></span><br><span class="line"><span class="comment"> * @return &#123; number &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    indexOf(item) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">if</span> (current === item) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getHead"><a href="#getHead" class="headerlink" title="getHead"></a>getHead</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    getHead() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码优化-amp-amp-完成例子"><a href="#代码优化-amp-amp-完成例子" class="headerlink" title="代码优化 &amp;&amp; 完成例子"></a>代码优化 &amp;&amp; 完成例子</h2><p>从上面我们观察到，insert，和removeAt这两个方法都用到了position 去获取上一个元素和当前元素，那么我们可以把这方法抽离出来进行一个代码结构的优化，下面给大家展示一下完整的例子</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by WebStorm.</span></span><br><span class="line"><span class="comment"> * User: chrischen</span></span><br><span class="line"><span class="comment"> * Date: 2021/3/18</span></span><br><span class="line"><span class="comment"> * Time: 11:50 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param item &#123; Node &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">constructor</span>(item) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = item;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    head = <span class="literal">null</span>;</span><br><span class="line">    length = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 追加节点</span></span><br><span class="line"><span class="comment">     * @param item &#123; Node &#125; 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    append(item) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(item);      <span class="comment">// 创建一个节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.head) &#123;</span><br><span class="line">            <span class="comment">// 有head头则遍历到获取到最后一个节点，把next指向新追加的节点</span></span><br><span class="line">            <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.next = node;</span><br><span class="line">        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 无head头，则直接把head头替换为新的节点</span></span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 追加成功后，链表的长度加1</span></span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向链表中的某一个位置插入 节点</span></span><br><span class="line"><span class="comment">     * @param position &#123; number &#125;</span></span><br><span class="line"><span class="comment">     * @param item &#123; Node &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    insert(position, item) &#123;</span><br><span class="line">        <span class="comment">// 边界判断 , 防止 position 越界</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt; <span class="keyword">this</span>.length) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(item);      <span class="comment">// 创建一个节点</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 插入的位置是head头前面</span></span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">                <span class="keyword">this</span>.head = node;           <span class="comment">// 把head替换为新节点</span></span><br><span class="line">                node.next = current;        <span class="comment">// 把新节点的next指向原来的head节点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 其他位置，则需要遍历链表获取到对应到插入的位置</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 思路:</span></span><br><span class="line"><span class="comment">                 * 1. 通过positon获取到上一个节点和当前节点</span></span><br><span class="line"><span class="comment">                 * 2. 把上一个节点的next指向到新节点</span></span><br><span class="line"><span class="comment">                 * 3. 把新节点的next指向到当前节点 (插入后就是新节点的下一个节点了)</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                let &#123; current, previous &#125; = this.#getPrevAndCurrentNode(position);</span><br><span class="line">                <span class="keyword">let</span> node = <span class="keyword">new</span> Node(item);</span><br><span class="line">                previous.next = node;</span><br><span class="line">                node.next = current;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.length++;              <span class="comment">// 插入成功后，链表的长度加1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'position的值越界了'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过positon获取上一个节点和当前节点</span></span><br><span class="line"><span class="comment">     * @param position &#123; number &#125;</span></span><br><span class="line"><span class="comment">     * @return &#123; &#123; current, previous &#125; | undefined &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    #getPrevAndCurrentNode(position) &#123;      // #表示私有变量esnext新标准</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> current;</span><br><span class="line">        <span class="keyword">let</span> previous;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'当前为空'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt; <span class="keyword">this</span>.length) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">                previous = <span class="literal">null</span>;</span><br><span class="line">                current = <span class="keyword">this</span>.head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">                <span class="keyword">while</span> (index &lt; position) &#123;</span><br><span class="line">                    previous = current;</span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">`position的值 "<span class="subst">$&#123; position &#125;</span>" 不符合规范`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; current, previous &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过位置删除节点</span></span><br><span class="line"><span class="comment">     * @param position</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    removeAt(position) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 思路:</span></span><br><span class="line"><span class="comment">         * 1. 通过position 遍历链表和 找到上一个节点和当前节点</span></span><br><span class="line"><span class="comment">         * 2. 把上一个节点的next指向到当前节点的next (也就是当前节点的下一个节点)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// postion越界判断,保证传入的位置是正确的</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt; <span class="keyword">this</span>.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">                <span class="keyword">this</span>.head = current.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                let &#123; current, previous &#125; = this.#getPrevAndCurrentNode(position);</span><br><span class="line">                previous.next = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'position的值越界了'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length--;      <span class="comment">// remove掉后，链表长度减1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过节点找到 position</span></span><br><span class="line"><span class="comment">     * @param item &#123; Node &#125;</span></span><br><span class="line"><span class="comment">     * @return &#123; number &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    indexOf(item) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">if</span> (current === item) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取链表头</span></span><br><span class="line"><span class="comment">     * @return &#123;  Node | null &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getHead() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不到200行代码，就这样一个单向链表就实现了😂</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后说下我个人的理解，其实学习数据结构出了数据结构本身，更多的是学习一种解决问题的思维，能够举一反三，你知道的东西多了都熟悉了，才有能力去创新。</p><p>后面打算写一些非技术型的文章，输出下别的内容哈哈🤪</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近在找工作，然后看到boss直聘的论坛上，一个前端招聘者在抱怨招不到合适的人，面了一大堆人，工作2-3年的，用JavaScript实现一个
      
    
    </summary>
    
      <category term="数据结构" scheme="https://ImChrisChen.Github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Javascript" scheme="https://ImChrisChen.Github.io/tags/Javascript/"/>
    
      <category term="数据结构" scheme="https://ImChrisChen.Github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>http协议发展历史和各版本之间的区别 📖</title>
    <link href="https://ImChrisChen.Github.io/2021/05/19/HTTP%E5%8D%8F%E8%AE%AE%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2%E5%92%8C%E5%90%84%E7%89%88%E6%9C%AC%E4%B9%8B%E5%89%8D%E7%9A%84%E5%8C%BA%E5%88%AB%20%F0%9F%93%96/"/>
    <id>https://ImChrisChen.Github.io/2021/05/19/HTTP协议发展历史和各版本之前的区别 📖/</id>
    <published>2021-05-18T22:22:32.000Z</published>
    <updated>2021-06-12T06:59:21.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HTTP是web编程最为基础的了知识了，有 <code>互联网基石</code> 的称号可想有多重要, 准备重新整理输出一篇博客，通过这种方式去加深印象</p><hr><h2 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h2><p>在最早的时候呢，第一个定稿http协议是http0.9，在这个版本的http协议非常简单</p><h3 id="只有一个GET命令"><a href="#只有一个GET命令" class="headerlink" title="只有一个GET命令"></a>只有一个GET命令</h3><h3 id="没有header等相关描述数据的信息"><a href="#没有header等相关描述数据的信息" class="headerlink" title="没有header等相关描述数据的信息"></a>没有header等相关描述数据的信息</h3><h3 id="服务器发送完毕，就关闭了TCP连接"><a href="#服务器发送完毕，就关闭了TCP连接" class="headerlink" title="服务器发送完毕，就关闭了TCP连接"></a>服务器发送完毕，就关闭了TCP连接</h3><pre><code>短连接，一个TCP只能发送一个HTTP请求 因此，为了解决这些特性带来的问题， 在后续的http1.1 就进行了升级，在同一个TCP连接中可以发送 多个请求，更快的提升了http的传输效率和服务性能</code></pre><h2 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h2><h3 id="新增了很多命令"><a href="#新增了很多命令" class="headerlink" title="新增了很多命令"></a>新增了很多命令</h3><blockquote><p>POST，PUT，HEADER等</p></blockquote><h3 id="新增了status-code等-header头相关信息"><a href="#新增了status-code等-header头相关信息" class="headerlink" title="新增了status code等 header头相关信息"></a>新增了status code等 header头相关信息</h3><blockquote><p>发送和请求数据的一些描述</p></blockquote><h3 id="新增了多字符集，多部分发送，权限，缓存等"><a href="#新增了多字符集，多部分发送，权限，缓存等" class="headerlink" title="新增了多字符集，多部分发送，权限，缓存等"></a>新增了多字符集，多部分发送，权限，缓存等</h3><blockquote><p>有了这些东西后，能够更好的有利于的去实现web服务</p></blockquote><h2 id="HTTP-1-1-（目前应用最多最广泛）"><a href="#HTTP-1-1-（目前应用最多最广泛）" class="headerlink" title="HTTP/1.1 （目前应用最多最广泛）"></a>HTTP/1.1 （目前应用最多最广泛）</h2><h3 id="新增持久链接-keep-alive（-默认开启-）"><a href="#新增持久链接-keep-alive（-默认开启-）" class="headerlink" title="新增持久链接 keep-alive（ 默认开启 ）"></a>新增持久链接 keep-alive（ 默认开启 ）</h3><blockquote><p>在一个TCP连接中可以发送多个HTTP请求， 一个HTTP请求肯定是在在某个TCP连接中去发送的</p></blockquote><p><code>keep-alive</code>： 在HTTP1.1的升级最主要的是 <code>keep-alive</code> 持久链接 大大的减少了每次请求都要建立一次TCP连接带来的耗时，从而提升了HTTP请求性能，keep-alive 带来这么大性能提升的同时也也有他的缺点</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top/blog/Ph3PSc.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>当然<code>keep-alive</code>也有缺点： <strong>就算是在空闲状态，它还是会消耗服务器资源，而且在重负载时，还有可能遭受 DoS attack 攻击。这种场景下，可以使用非长连接，即尽快关闭那些空闲的连接，也能对性能有所提升。</strong></p><p><strong>DOS攻击类型</strong></p><ul><li>带宽攻击</li><li>服务器请求泛滥</li><li>SYN 泛滥攻击</li><li>ICMP 泛滥攻击</li><li>点对点攻击</li><li>永久 DoS 攻击</li><li>应用层泛滥攻击</li></ul><h3 id="新增-pipeline-默认关闭"><a href="#新增-pipeline-默认关闭" class="headerlink" title="新增 pipeline ( 默认关闭 )"></a>新增 pipeline ( 默认关闭 )</h3><p>HTTP流水线模型 ，服务端在多个连续的请求甚至都不用等待立即返回就可以被发送 )</p><h3 id="新增域名分片-（-默认关闭，在HTTP2-中就没必要使用这个了，集成了更好的解决方案-）"><a href="#新增域名分片-（-默认关闭，在HTTP2-中就没必要使用这个了，集成了更好的解决方案-）" class="headerlink" title="新增域名分片 （ 默认关闭，在HTTP2 中就没必要使用这个了，集成了更好的解决方案 ）"></a>新增域名分片 （ 默认关闭，在HTTP2 中就没必要使用这个了，集成了更好的解决方案 ）</h3><p>作为 HTTP/1.x 的连接，请求是序列化的，哪怕本来是无序的，在没有足够庞大可用的带宽时，也无从优化。一个解决方案是，<strong>浏览器为每个域名建立多个连接，以实现并发请求。曾经默认的连接数量为 2 到 3 个，现在比较常用的并发连接数已经增加到 6 条。</strong>如果尝试大于这个数字，就有触发服务器 DoS 保护的风险。域名分片主要解决的就是这个问题</p><p>如果服务器端想要更快速的响应网站或应用程序的应答，它可以迫使客户端建立更多的连接。例如，不要在同一个域名下获取所有资源，假设有个域名是 <code>www.example.com</code>，我们可以把它拆分成好几个域名：<code>www1.example.com</code>、<code>www2.example.com</code>、<code>www3.example.com</code>。所有这些域名都指向同一台服务器，浏览器会同时为每个域名建立 6 条连接(在我们这个例子中，连接数会达到 18 条)。这一技术被称作域名分片。</p><h2 id="HTTP-2-未来的趋势，目前还没有普及"><a href="#HTTP-2-未来的趋势，目前还没有普及" class="headerlink" title="HTTP/2 (未来的趋势，目前还没有普及)"></a>HTTP/2 (未来的趋势，目前还没有普及)</h2><h3 id="所有数据都是以二进制来进行传输"><a href="#所有数据都是以二进制来进行传输" class="headerlink" title="所有数据都是以二进制来进行传输"></a>所有数据都是以二进制来进行传输</h3><blockquote><p>HTTP/2之前都是用的字符串进行传输</p></blockquote><h3 id="同一个连接中发送多个请求不再需要按照顺序来"><a href="#同一个连接中发送多个请求不再需要按照顺序来" class="headerlink" title="同一个连接中发送多个请求不再需要按照顺序来"></a>同一个连接中发送多个请求不再需要按照顺序来</h3><blockquote><p>HTTP/2之前都是通过串行请求来响应请求，有了这个功能后可以并行返回请求了</p></blockquote><h3 id="头信息压缩"><a href="#头信息压缩" class="headerlink" title="头信息压缩"></a>头信息压缩</h3><h3 id="推送（服务端能够向客户端推送消息）"><a href="#推送（服务端能够向客户端推送消息）" class="headerlink" title="推送（服务端能够向客户端推送消息）"></a>推送（服务端能够向客户端推送消息）</h3><blockquote><p>有了推送功能后，可以实现html/css/js 并行下载，而不是等到加载到html后，再解析DOM时再去加载css/js/image等资源文件</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;HTTP是web编程最为基础的了知识了，有 &lt;code&gt;互联网基石&lt;/code&gt; 的称号可想有多重要, 准备重新整理输出一篇博客，通过这种方
      
    
    </summary>
    
      <category term="计算机网络" scheme="https://ImChrisChen.Github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Http" scheme="https://ImChrisChen.Github.io/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://ImChrisChen.Github.io/2021/05/18/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://ImChrisChen.Github.io/2021/05/18/JavaScript设计模式/</id>
    <published>2021-05-18T15:53:59.385Z</published>
    <updated>2021-05-18T15:53:59.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-设计模式"><a href="#JavaScript-设计模式" class="headerlink" title="JavaScript - 设计模式"></a>JavaScript - 设计模式</h1><h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a><strong>什么是设计模式</strong></h2><p>作者的这个说明解释得挺好</p><blockquote><p>假设有一个空房间，我们要日复一日地往里 面放一些东西。最简单的办法当然是把这些东西 直接扔进去，但是时间久了，就会发现很难从这 个房子里找到自己想要的东西，要调整某几样东 西的位置也不容易。所以在房间里做一些柜子也 许是个更好的选择，虽然柜子会增加我们的成 本，但它可以在维护阶段为我们带来好处。使用 这些柜子存放东西的规则，或许就是一种模</p></blockquote><h2 id="观察者模式-发布订阅模式"><a href="#观察者模式-发布订阅模式" class="headerlink" title="观察者模式 / 发布订阅模式"></a>观察者模式 / 发布订阅模式</h2><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by WebStorm.</span></span><br><span class="line"><span class="comment"> * User: chrischen</span></span><br><span class="line"><span class="comment"> * Date: 2020/7/13</span></span><br><span class="line"><span class="comment"> * Time: 10:49 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">    @log()</span><br><span class="line">    add(a, b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target, name, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`target:<span class="subst">$&#123; target &#125;</span>, name: <span class="subst">$&#123; name &#125;</span>, descriptor: <span class="subst">$&#123; descriptor &#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">let</span> oldValue = descriptor.value;</span><br><span class="line">    </span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`调用<span class="subst">$&#123; name &#125;</span>参数`</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> oldValue.apply(target, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldValue.apply(target, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> math = <span class="keyword">new</span> <span class="built_in">Math</span>();</span><br><span class="line">math.add(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-设计模式&quot;&gt;&lt;a href=&quot;#JavaScript-设计模式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript - 设计模式&quot;&gt;&lt;/a&gt;JavaScript - 设计模式&lt;/h1&gt;&lt;h2 id=&quot;什么是设计模式&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MingleJS的设计理念以及功能介绍✨</title>
    <link href="https://ImChrisChen.Github.io/2021/05/09/MingleJS%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E4%BB%A5%E5%8F%8A%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/"/>
    <id>https://ImChrisChen.Github.io/2021/05/09/MingleJS的设计理念以及效果展示/</id>
    <published>2021-05-08T19:46:59.000Z</published>
    <updated>2021-06-22T03:19:11.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在找工作，把自己的以前做的项目梳理一下，于是找了几个比较有代表性的项目，分别由不用文章给大家介绍一下，这篇文章讲的是MingleJS，是我个人独立开发的一个项目，针对toB中后台系统组件化开发的一个解决方案，已在公司内部技术部内部推行使用。</p><p>下面分为几个板块来详细介绍一下它</p><ul><li>What？ MingleJS是什么？</li><li>Why？  为什么要开发这样一个东西，它解决了什么样的问题？</li><li>How？  如何去使用它？</li></ul><h2 id="MingleJS-是什么？"><a href="#MingleJS-是什么？" class="headerlink" title="MingleJS 是什么？"></a>MingleJS 是什么？</h2><p>描述：融汇WUI的思想，实现的一套开箱即用的前端框架/组件库</p><p>面向用户：后端开发工程师【，全栈开发工程师</p><p>应用场景：toB 中后台系统</p><p>特点：无需打包编译等过程，直接在html中引入minglejs就能使用</p><p>功能：其内部集成了 Antd 组件库，组件提供了简易的API，以及交互规则，模版渲染，流程控制，循环列表等</p><h2 id="创作背景-（为什么开发？）"><a href="#创作背景-（为什么开发？）" class="headerlink" title="创作背景 （为什么开发？）"></a>创作背景 （为什么开发？）</h2><p>在上一家公司的技术部里，toB中后台系统的开发模式是前后端不分离，所有的内部后台系统的项目都是基于后端的项目中的，后端通过在模版里去调用前端的组件，配置几个参数，一个页面视图和交互就都构建好了（组件支持的相对较完善）</p><p>这套框架就是WUI，是公司自己的内部框架和组件库了，是一套以CommonJS + jQuery 实现的一套内部UI框架，组件规则里包含了交互逻辑， 入职后一直在它上面去做开发和维护，因为是以前的上古项目，维护异常痛苦，于是萌生出了把WUI重构的想法</p><p>然后就开始对框架的使用和一些组件/功能模块去进行剖析，用在了哪些系统，一些列边界情况的考虑等等，研究了好几天，因为代码做了太多的兼容处理，导致阅读起来成本巨高，我放弃了，于是准备自己重新写一套框架。保留和WUI同样的模式，让后端去使用前端的组件库，团队模式还是保持不变。</p><p>找我们老大聊之后，于是就开始了。</p><h2 id="它解决了什么样的问题？"><a href="#它解决了什么样的问题？" class="headerlink" title="它解决了什么样的问题？"></a>它解决了什么样的问题？</h2><ul><li><p>由于团队中toB系统是前后端不分离的模式，后端MVC架构中的View这一层，需要前端去辅助实现，它提供了，开箱即用，无需打包编译的特点，后端直接在script中引入minglejs，就能在项目中去使用</p></li><li><p>几乎无需编写视图代码，真正实现配置化，还有配套可视化代码生成器，能够快速构建视图 </p></li></ul><h2 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h2><ul><li>MingleJS 代码地址 <a href="https://github.com/ImChrisChen/MingleJS" target="_blank" rel="noopener">https://github.com/ImChrisChen/MingleJS</a><ul><li>基于MingleJS开发的可视化页面生成器 演示地址 👉🏻 <a href="http://webed.chrisorz.cn/#/edit" target="_blank" rel="noopener">可视化平台</a></li></ul></li></ul><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul><li>模版解析<ul><li>文本解析，属性解析, 拓展运算符 等 &lt;{var}&gt;</li><li>事件解析 <code>@[event]</code>  例如：<code>@click=&quot;handleClick&quot;</code></li><li>流程控制 <code>w-if w-else</code></li><li>循环数据 <code>w-foreach</code></li><li>指令 <code>w-readonly</code> 等</li></ul></li></ul><p>有时间再补充， 未完待续。。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在找工作，把自己的以前做的项目梳理一下，于是找了几个比较有代表性的项目，分别由不用文章给大家介绍一下，这篇文章讲的是MingleJS，是
      
    
    </summary>
    
      <category term="设计模式" scheme="https://ImChrisChen.Github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工程化" scheme="https://ImChrisChen.Github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="组件化" scheme="https://ImChrisChen.Github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="Javascript" scheme="https://ImChrisChen.Github.io/tags/Javascript/"/>
    
      <category term="WebComponents" scheme="https://ImChrisChen.Github.io/tags/WebComponents/"/>
    
      <category term="Antd" scheme="https://ImChrisChen.Github.io/tags/Antd/"/>
    
      <category term="Typescript" scheme="https://ImChrisChen.Github.io/tags/Typescript/"/>
    
      <category term="React" scheme="https://ImChrisChen.Github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JS手写一个路由模块 🍊</title>
    <link href="https://ImChrisChen.Github.io/2020/07/05/JS%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%9D%97/"/>
    <id>https://ImChrisChen.Github.io/2020/07/05/JS手写一个路由模块/</id>
    <published>2020-07-05T12:37:01.000Z</published>
    <updated>2021-05-18T15:53:59.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS手写一个路由模块"><a href="#JS手写一个路由模块" class="headerlink" title="JS手写一个路由模块"></a>JS手写一个路由模块</h1><h3 id="Hash-模式"><a href="#Hash-模式" class="headerlink" title="Hash 模式"></a>Hash 模式</h3><p>原理：通过 window.onhashchange监听到页面url地址的hash值变化，改变页面内容</p><p>实现要求：浏览器端自行可以实现，不用服务器端配置</p><blockquote><p>本质上就是检测 url 的变化，截获 url 地址，然后解析来匹配路由规则。</p><p>这种 #。后面 hash 值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求，也就不会刷新页面。另外每次 hash 值的变化，还会触发 hashchange 这个事件，通过这个事件我们就可以知道 hash 值发生了哪些变化。</p></blockquote><p>废话不多说直接上代码完成最小化实现</p><p><a href="http://example.chrischen.top/router-example/hash-mode/router.html#/page1" target="_blank" rel="noopener">在线演示地址</a></p><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/page1"</span>&gt;</span>page1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/page2"</span>&gt;</span>page2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/page3"</span>&gt;</span>page3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/page4"</span>&gt;</span>page4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> router = <span class="built_in">window</span>.__router__;</span></span><br><span class="line"><span class="javascript">    router.route(<span class="string">'/page1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        container.innerHTML = <span class="string">'page1'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    router.route(<span class="string">'/page2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        container.innerHTML = <span class="string">'page2'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    router.route(<span class="string">'/page3'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        container.innerHTML = <span class="string">'page3'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    router.route(<span class="string">'/page4'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        container.innerHTML = <span class="string">'page4'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">    routes = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// 监听hash值变化</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; <span class="keyword">this</span>._render());</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; <span class="keyword">this</span>._render());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每次改变路由会执行注册路由触发的回调函数</span></span><br><span class="line">    _render() &#123;</span><br><span class="line">      <span class="comment">// location.hash  "#/page1"</span></span><br><span class="line">        <span class="keyword">let</span> hash = location.hash.slice(<span class="number">1</span>) || <span class="string">'/'</span>;</span><br><span class="line">        <span class="keyword">this</span>.routes[hash] &amp;&amp; <span class="keyword">this</span>.routes[hash]();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册路由</span></span><br><span class="line">    route(path, callback) &#123;</span><br><span class="line">        <span class="keyword">this</span>.routes[path] = callback</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.__router__ = <span class="keyword">new</span> Router();</span><br></pre></td></tr></table></figure><h3 id="HTML5-History-模式"><a href="#HTML5-History-模式" class="headerlink" title="HTML5 History 模式"></a>HTML5 History 模式</h3><p>原理：xxx</p><p>14年后，因为HTML5标准发布。多了两个 API，pushState 和 replaceState，通过这两个 API 可以改变 url 地址且不会发送请求。同时还有 onpopstate 事件。通过这些就能用另一种方式来实现前端路由了，但原理都是跟 hash 实现相同的。用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。具体可以见：</p><p>// TODO 未完待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS手写一个路由模块&quot;&gt;&lt;a href=&quot;#JS手写一个路由模块&quot; class=&quot;headerlink&quot; title=&quot;JS手写一个路由模块&quot;&gt;&lt;/a&gt;JS手写一个路由模块&lt;/h1&gt;&lt;h3 id=&quot;Hash-模式&quot;&gt;&lt;a href=&quot;#Hash-模式&quot; class
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ImChrisChen.Github.io/tags/Javascript/"/>
    
      <category term="Vue" scheme="https://ImChrisChen.Github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>使用typescript%20编写一个npm模块</title>
    <link href="https://ImChrisChen.Github.io/2020/06/26/%E4%BD%BF%E7%94%A8typescript%20%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAnpm%E6%A8%A1%E5%9D%97/"/>
    <id>https://ImChrisChen.Github.io/2020/06/26/使用typescript 编写一个npm模块/</id>
    <published>2020-06-26T04:15:50.000Z</published>
    <updated>2021-05-18T15:53:59.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>最近公司在推小游戏这块的业务，所以就有了这么一个需求，要求在oppo/vivo小游戏上，接入一套SDK给研发调用，主用于收集用户数据（注册，登录，游戏在线时常上报，等一系列用户行为记录），然后需在游戏项目（用的ts）中去编写代码，于是就有了这个想法，把SDK做成一个npm模块，以后维护这个模块就好了，便于维护和管理。</p><blockquote><p>网上看了很多资料，最后总结出这篇文章，在这里谢谢各位大佬</p></blockquote><h2 id="1-初始化NPM包"><a href="#1-初始化NPM包" class="headerlink" title="1 .  初始化NPM包"></a>1 .  初始化NPM包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -y// 初始化package.json</span><br></pre></td></tr></table></figure><h2 id="2-安装typescript"><a href="#2-安装typescript" class="headerlink" title="2 . 安装typescript"></a>2 . 安装typescript</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install typescript -D</span><br></pre></td></tr></table></figure><h2 id="3-配置-tsconfig-json"><a href="#3-配置-tsconfig-json" class="headerlink" title="3 . 配置 tsconfig.json"></a>3 . 配置 tsconfig.json</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tsc --init// 初始化tsconfig.json</span><br></pre></td></tr></table></figure><p>修改配置为</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    "target": "es5",// 指定ECMAScript目标版本</span><br><span class="line">    "module": "commonjs",// 指定模块化类型</span><br><span class="line">    "declaration": true,// 生成 `.d.ts` 文件</span><br><span class="line">    "outDir": "./dist",// 编译后生成的文件目录</span><br><span class="line">    "strict": true// 开启严格的类型检测</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-编写模块"><a href="#4-编写模块" class="headerlink" title="4 . 编写模块"></a>4 . 编写模块</h2><p>这里把之前写好的SDK模块拿过来</p><p>然后在跟目录下新建 index.ts 如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown20200625002857.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="5"><a href="#5" class="headerlink" title="5 ."></a>5 .</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips&quot;&gt;&lt;/a&gt;Tips&lt;/h3&gt;&lt;p&gt;最近公司在推小游戏这块的业务，所以就有了这么一个需求，要求在oppo/vivo小游戏上，接入一套SDK给研发调用，主用于收集
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ImChrisChen.Github.io/tags/Javascript/"/>
    
      <category term="Typescript" scheme="https://ImChrisChen.Github.io/tags/Typescript/"/>
    
      <category term="NPM" scheme="https://ImChrisChen.Github.io/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>npm &amp;&amp; nrm 常用命令及npm 包部署</title>
    <link href="https://ImChrisChen.Github.io/2020/05/24/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://ImChrisChen.Github.io/2020/05/24/npm常用命令/</id>
    <published>2020-05-24T14:08:38.000Z</published>
    <updated>2021-05-18T15:53:59.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NPM-NRM"><a href="#NPM-NRM" class="headerlink" title="NPM | NRM"></a>NPM | NRM</h1><h3 id="查看那些npm包可以更新"><a href="#查看那些npm包可以更新" class="headerlink" title="查看那些npm包可以更新"></a>查看那些npm包可以更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -g outdated// 加上 -g 代表全局 global</span><br></pre></td></tr></table></figure><h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure><h3 id="更新npm模块"><a href="#更新npm模块" class="headerlink" title="更新npm模块"></a>更新npm模块</h3><h4 id="安装npm-check-updates模块"><a href="#安装npm-check-updates模块" class="headerlink" title="安装npm-check-updates模块"></a>安装npm-check-updates模块</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 全局安装 npm-check-updates</span><br><span class="line">npm install -g npm-check-updates</span><br></pre></td></tr></table></figure><h4 id="检查可更新模块"><a href="#检查可更新模块" class="headerlink" title="检查可更新模块"></a>检查可更新模块</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm-check-updates</span><br><span class="line">//也可以使用简写</span><br><span class="line">ncu</span><br></pre></td></tr></table></figure><h4 id="模块更新"><a href="#模块更新" class="headerlink" title="模块更新"></a>模块更新</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ncu -u &amp;&amp; npm install</span><br><span class="line">//或者</span><br><span class="line"> npm update 模块名</span><br></pre></td></tr></table></figure><h3 id="查看全局包的位置"><a href="#查看全局包的位置" class="headerlink" title="查看全局包的位置"></a>查看全局包的位置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm root -g</span><br></pre></td></tr></table></figure><h3 id="发布-更新-npm模块"><a href="#发布-更新-npm模块" class="headerlink" title="发布 | 更新 npm模块"></a>发布 | 更新 npm模块</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><h3 id="撤回已发布的npm包"><a href="#撤回已发布的npm包" class="headerlink" title="撤回已发布的npm包"></a>撤回已发布的npm包</h3><p><strong>操作限制</strong></p><ol><li>根据规范，只有在发包的<strong>24小时内才允许</strong>撤销发布的包（ unpublish is only allowed with versions published in the last 24 hours）</li><li><strong>即使</strong>你撤销了发布的包，<strong>发包的时候也不能再和被撤销的包的名称和版本重复了</strong>（即不能名称相同，版本相同，因为这两者构成的唯一标识已经被“占用”了）</li></ol><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> unpublish dalan_ui_pc</span><br><span class="line"><span class="built_in">npm</span> unpublish dalan_ui_pc --force 强制撤销</span><br></pre></td></tr></table></figure><h3 id="nrm-添加源"><a href="#nrm-添加源" class="headerlink" title="nrm 添加源"></a>nrm 添加源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nrm add dl_npm http://npm.superdalan.com/</span><br></pre></td></tr></table></figure><h3 id="npm自动更新版本号"><a href="#npm自动更新版本号" class="headerlink" title="npm自动更新版本号"></a>npm自动更新版本号</h3><p><a href="https://blog.csdn.net/znyaiw/article/details/80199457" target="_blank" rel="noopener">参考链接</a></p><p><a href="https://blog.csdn.net/znyaiw/article/details/80199457" target="_blank" rel="noopener">https://blog.csdn.net/znyaiw/article/details/80199457</a></p><blockquote><p>版本号递增规则：<br>- 主版本号( major )：做了不兼容修改或颠覆式的重写<br>- 次版本号( minor )：向下兼容的功能性新增<br>- 修订号( patch )：向下兼容的问题修正</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm version patch -m '修复xxxx'</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NPM-NRM&quot;&gt;&lt;a href=&quot;#NPM-NRM&quot; class=&quot;headerlink&quot; title=&quot;NPM | NRM&quot;&gt;&lt;/a&gt;NPM | NRM&lt;/h1&gt;&lt;h3 id=&quot;查看那些npm包可以更新&quot;&gt;&lt;a href=&quot;#查看那些npm包可以更新&quot; cla
      
    
    </summary>
    
    
      <category term="npm" scheme="https://ImChrisChen.Github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Router history模式的配置方法(nginx)及其原理🧐</title>
    <link href="https://ImChrisChen.Github.io/2020/05/09/Vue-Router%20history%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95(nginx)%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86%F0%9F%A7%90/"/>
    <id>https://ImChrisChen.Github.io/2020/05/09/Vue-Router history模式的配置方法(nginx)及其原理🧐/</id>
    <published>2020-05-08T18:58:00.000Z</published>
    <updated>2021-05-22T20:39:28.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>自己在部署单页面应用(Single Page Applacation)的时候发现了一些问题</p><p>因为在很久以前 , 都是把项目打包好丢给后端or运维去部署,什么nginx配置，Jenkins配置，钩子，自动化脚本都不用管，直到有一天我在 KVM 机器 Linux上用 nginx 部署的时候，才发现一个问题…</p><p>为啥项目部署好后，一切都正常使用，但是一刷新就404了… 咋回事？？？为了弄懂其中原理. 于是就有了下面这篇文章 👇🏻</p><pre><code>本文用Vue的项目进行举例 , React Angular 等其他支持 SPA 的框架同理</code></pre><hr><h2 id="Vue路由模式"><a href="#Vue路由模式" class="headerlink" title="Vue路由模式"></a>Vue路由模式</h2><pre><code>要讲清楚这个问题，首先得从路由模式说起</code></pre><p><code>vue-router</code>分为<code>hash</code>和<code>history</code>模式</p><h3 id="hash模式-vue-router默认模式"><a href="#hash模式-vue-router默认模式" class="headerlink" title="hash模式 (vue-router默认模式)"></a>hash模式 (vue-router默认模式)</h3><p>url的表现形式为<code>http://blog.chrischen.top#home</code></p><p>这种方式有些缺点：</p><ul><li>比较难看 </li><li>使用location.search 获取不了query后面的参数</li></ul><h3 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h3><p>url表现形式为 <code>http://blog.chrischen.top/home</code></p><p>history 模式 解决了hash模式上面的一些问题，同时还有其他的一些优点<br>这里不细讲 history模式的区别，不然跑题了</p><p>但如果要使用<code>history</code>模式，我们需要在服务器上进行额外配置。本文将讨论如何配置以及为什么要这样配置。</p><h2 id="history模式的配置方法"><a href="#history模式的配置方法" class="headerlink" title="history模式的配置方法"></a>history模式的配置方法</h2><p>首先要将<code>mode</code>设置为<code>history</code>：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="keyword">mode</span>: <span class="string">'history'</span>,</span><br><span class="line">  route<span class="variable">s:</span> [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后设置后端（这里采用的nginx）：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就…… 没了！显然官方的教程讲的比较简略，并且我们参照这个教程实际上还是会遇到一些问题。</p><h2 id="history模式的配置实践及原理"><a href="#history模式的配置实践及原理" class="headerlink" title="history模式的配置实践及原理"></a><code>history</code>模式的配置实践及原理</h2><h3 id="只配置前端的情况"><a href="#只配置前端的情况" class="headerlink" title="只配置前端的情况"></a>只配置前端的情况</h3><p>首先，我们将<code>mode</code>设置为<code>history</code>，但不配置后端。然后，假如我们的路由是长这个样子的：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">const routes = [</span><br><span class="line">    &#123;<span class="string">path:</span> <span class="string">'/home'</span>, <span class="string">component:</span> Home&#125;,</span><br><span class="line">    &#123;<span class="string">path:</span> <span class="string">'/'</span>, <span class="string">redirect:</span> <span class="string">'/home'</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>我们用nginx部署项目，然后在地址栏输入<code>http://localhost:8080</code>（这里配置的端口是8080），你会发现地址栏之后会变为<code>http://localhost:8080/home</code>，并且<strong>看起来</strong>一切正常，<strong>似乎</strong>路由也可以正常切换而不会发生其他问题（实际上会发生问题，后面会进行讨论）。看起来好像不需要按官网告诉我们的那样配置后端也能实现<code>history</code>模式，但如果你直接在地址栏输入<code>http://localhost:8080/home</code>，你会发现你获得了一个404页面。</p><p>那么<code>http://localhost:8080</code>为什么可以（部分）正常显示呢？道理其实很简单，你访问<code>http://localhost:8080</code>时，静态服务器（这里是nginx）会默认去目标目录（这里为<code>location</code>中<code>root</code>所指定的目录）下寻找<code>index.html</code>（这是nginx在端口后没有额外路径时的默认行为），目标目录下有这个文件吗？有！然后静态服务器返回给你这个文件，配合<code>vue-router</code>进行转发，自然可以（部分）正常显示。<br>但如果直接访问<code>http://localhost:8080/home</code>，静态服务器会去目标目录下寻找<code>home</code>文件，目标目录下有这个文件吗？没有！所以自然就404了。</p><h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>为了达到直接访问<code>http://localhost:8080/home</code>也可以成功的目的，我们需要对后端（这里即nginx）进行一些配置。</p><p>首先想想，要怎样才能达到这个目的呢？</p><p>在传统的<code>hash</code>模式中（<code>http://localhost:8080#home</code>），即使不需要配置，静态服务器始终会去寻找<code>index.html</code>并返回给我们，然后<code>vue-router</code>会获取<code>#</code>后面的字符作为参数，对前端页面进行变换。</p><p>类比一下，在<code>history</code>模式中，我们所想要的情况就是：输入<code>http://localhost:8080/home</code>，但最终返回的也是<code>index.html</code>，然后<code>vue-router</code>会获取<code>home</code>作为参数，对前端页面进行变换。那么在nginx中，谁能做到这件事呢？答案就是<code>try_files</code>。</p><p>大意就是它会按照<code>try_files</code>后面的参数依次去匹配<code>root</code>中对应的文件或文件夹。如果匹配到的是一个文件，那么将返回这个文件；如果匹配到的是一个文件夹，那么将返回这个文件夹中<code>index</code>指令指定的文件。最后一个<code>uri</code>参数将作为前面没有匹配到的fallback。（注意<code>try_files</code>指令至少需要两个参数）</p><p>拿我自己的网站举个例子：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>            /work/apps/blog.chrischen.top;</span><br><span class="line">        <span class="attribute">index</span>           index.html;</span><br><span class="line">        <span class="attribute">try_files</span>       <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>$uri</code>是nginx中的变量，比如我访问的网址是<code>http://localhost:8080/home</code>，那么它就代表的<code>/home</code>。</p></blockquote><p>在<code>blog.chrischen.top</code>这个目录中，没有子目录，只有一个<code>index.html</code>和一些压缩后的名称是hash值的.js文件。当我们请求<code>http://localhost:8080/home</code>这个地址时，首先查找有无<code>home</code>这个文件，没有；再查找有无<code>home</code>目录，也没有。所以最终会定位到第三个参数从而返回<code>index.html</code>，按照这个规则，所有路由里的url路径最后都会定位到<code>index.html</code>。<code>vue-router</code>再获取参数进行前端页面的变换，至此，我们已经可以通过<code>http://localhost:8080/home</code>这个地址进行成功地访问了。<br>而<code>$uri</code>这个参数的作用其实是匹配那些.js文件用的，而<code>$uri/</code>在这个例子中并没有多大用，实际上是可以去掉的。</p><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>其原理就是用nginx把项目代理的SPA的根目录，并设置如果访问到其他不存在的页面,则会自己跳转到index.html页面，等于变相的把 blog.chrischen.top/home<br>后面的部分不做处理，然后就可以通过前端路由匹配规则进行匹配</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;自己在部署单页面应用(Single Page Applacation)的时候发现了一些问题&lt;/p&gt;
&lt;p&gt;因为在很久以前 ,
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://ImChrisChen.Github.io/tags/Vue/"/>
    
      <category term="Nginx" scheme="https://ImChrisChen.Github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>本地环境局域网内 + Nginx实现Https😎</title>
    <link href="https://ImChrisChen.Github.io/2020/05/09/%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%20+%20Nginx%20%E5%AE%9E%E7%8E%B0Https/"/>
    <id>https://ImChrisChen.Github.io/2020/05/09/本地环境局域网内 + Nginx 实现Https/</id>
    <published>2020-05-08T18:58:00.000Z</published>
    <updated>2021-05-22T20:39:28.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx-Https配置"><a href="#Nginx-Https配置" class="headerlink" title="Nginx+Https配置"></a>Nginx+Https配置</h3><p><code>TLS或传输层安全( transport layer security)</code>，它的前身是SSL(安全套接字层secure sockets layer)，是Web协议用来包裹在一个受保护，加密封装正常通道。<br>采用这种技术，服务器和客户端之间可以安全地进行交互，而不用担心消息将被拦截和读取。证书系统帮助用户在核实它们与连接站点的身份。</p><h3 id="步骤1：创建SSL证书"><a href="#步骤1：创建SSL证书" class="headerlink" title="步骤1：创建SSL证书"></a>步骤1：创建SSL证书</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /etc/nginx/ssl</span><br><span class="line">sudo openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</span><br></pre></td></tr></table></figure><p>创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。</p><p><strong>参数说明:</strong></p><p>req: 配置参数-x509指定使用 X.509证书签名请求管理(certificate signing request (CSR)).”X.509” 是一个公钥代表that SSL and TLS adheres to for its key and certificate management.<br>-nodes: 告诉OpenSSL生产证书时忽略密码环节.(因为我们需要Nginx自动读取这个文件，而不是以用户交互的形式)。<br>-days 36500: 证书有效期，100年<br>-newkey rsa:2048: 同时产生一个新证书和一个新的SSL key(加密强度为RSA 2048)<br>-keyout:SSL输出文件名<br>-out:证书生成文件名<br>它会问一些问题。需要注意的是在common name中填入网站域名，如wiki.xby1993.net即可生成该站点的证书，同时也可以使用泛域名如*.xby1993.net来生成所有二级域名可用的网站证书。<br>整个问题应该如下所示:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Country Name (2 letter code) [AU]:US</span><br><span class="line">State <span class="keyword">or</span> Province Name (full name) [Some-State]:New York</span><br><span class="line">Locality Name (eg, city) []:New York City</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.</span><br><span class="line">Organizational Unit Name (eg, section) []:Ministry of Water Slides</span><br><span class="line">Common Name (e.g.<span class="built_in"> server </span>FQDN <span class="keyword">or</span> YOUR name) []:your_domain.com</span><br><span class="line">Email<span class="built_in"> Address </span>[]:admin@your_domain.com</span><br></pre></td></tr></table></figure><h3 id="步骤2：-修改Nginx配置"><a href="#步骤2：-修改Nginx配置" class="headerlink" title="步骤2： 修改Nginx配置"></a>步骤2： 修改Nginx配置</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>; </span><br><span class="line"><span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">ssl_certificate</span> <span class="string">"/Users/chrischen/server/nginx/nginx.crt"</span>;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> <span class="string">"/Users/chrischen/server/nginx/nginx.key"</span>;</span><br><span class="line"><span class="attribute">server_name</span>  <span class="string">"wui-test.local.aidalan.com"</span>;</span><br><span class="line"><span class="attribute">server_name</span>  <span class="string">"test-wui.local.aidalan.com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">root</span>       <span class="string">"/Users/chrischen/dalan/wui-test.local.aidalan.com"</span>;</span><br><span class="line"><span class="attribute">index</span>      index.html index.htm;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#主要配置这个，包含 在server里面</span></span><br><span class="line"><span class="comment">#location ~ .*\.(php)?$ &#123;</span></span><br><span class="line"><span class="comment">#fastcgi_pass  127.0.0.1:9000;</span></span><br><span class="line"><span class="comment">#fastcgi_index index.php;</span></span><br><span class="line"><span class="comment">#include fcgi.conf;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">default_type</span> <span class="string">'text/html'</span>;</span><br><span class="line"><span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">set</span> <span class="variable">$ACAO</span> <span class="string">'*'</span>;</span><br><span class="line"><span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'<span class="variable">$ACAO</span>'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接 <a href="https://segmentfault.com/a/1190000004976222" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004976222</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Nginx-Https配置&quot;&gt;&lt;a href=&quot;#Nginx-Https配置&quot; class=&quot;headerlink&quot; title=&quot;Nginx+Https配置&quot;&gt;&lt;/a&gt;Nginx+Https配置&lt;/h3&gt;&lt;p&gt;&lt;code&gt;TLS或传输层安全( transport
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://ImChrisChen.Github.io/tags/Vue/"/>
    
      <category term="Nginx" scheme="https://ImChrisChen.Github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>有趣并实用的 JavaScript操作 😲</title>
    <link href="https://ImChrisChen.Github.io/2020/03/16/%E7%A5%9E%E5%A5%87%E7%9A%84Javascript/"/>
    <id>https://ImChrisChen.Github.io/2020/03/16/神奇的Javascript/</id>
    <published>2020-03-15T16:28:23.000Z</published>
    <updated>2021-05-22T20:39:28.990Z</updated>
    
    <content type="html"><![CDATA[<p>想来搞前端也快2年时间来，想起在刚开始写Javascript的时候，总是能遇见一些奇奇怪怪的问题, 和一些让人 WTF的操作，后面越来越深入的了解到这门语言后，一些令人摸不着头脑东西也就明白为什么会这样了,<br>这里也是记录一些好玩好用的JavaScript的片段，也算是一种输出吧</p><hr><h3 id="将多维数组变成一维数组"><a href="#将多维数组变成一维数组" class="headerlink" title="将多维数组变成一维数组"></a>将多维数组变成一维数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">8</span>,[<span class="number">10</span>,<span class="number">9</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line">str.join().split(<span class="string">','</span>); <span class="comment">// ["1", "2", "3", "4", "5", "6", "7", "8", "10", "9"]</span></span><br><span class="line">str.join(<span class="string">','</span>).split(<span class="string">','</span>); <span class="comment">// ["1", "2", "3", "4", "5", "6", "7", "8", "10", "9"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2 - es6</span></span><br><span class="line">str.flat(<span class="literal">Infinity</span>);<span class="comment">// ["1", "2", "3", "4", "5", "6", "7", "8", "10", "9"]</span></span><br></pre></td></tr></table></figure><h3 id="判断是否空对象"><a href="#判断是否空对象" class="headerlink" title="判断是否空对象"></a>判断是否空对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isEmptyObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更加简单的办法</span></span><br><span class="line"><span class="keyword">let</span> isEmptyObj = <span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="判断是否是空数组"><a href="#判断是否是空数组" class="headerlink" title="判断是否是空数组"></a>判断是否是空数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="built_in">Array</span>.isArray(arr) &amp;&amp; arr.length !== <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="向下取整的几种简写方式"><a href="#向下取整的几种简写方式" class="headerlink" title="向下取整的几种简写方式"></a>向下取整的几种简写方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">~~<span class="number">2.33</span><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.33</span> | <span class="number">0</span><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.33</span> &gt;&gt; <span class="number">0</span><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.33</span> &lt;&lt; <span class="number">0</span> <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.33</span> ^ <span class="number">0</span><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="取随机字符串"><a href="#取随机字符串" class="headerlink" title="取随机字符串"></a>取随机字符串</h3><blockquote><p>原理就是将随机转成字符串(11 ~ 36)进制字符串（10进制以上开始出现字母），然后截取去掉小数位</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substring(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="built_in">Math</span>.random().toString(<span class="number">32</span>).substring(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">// 02f3a8227c04b</span></span><br><span class="line"><span class="built_in">console</span>.log(str2) <span class="comment">// hs9lje959eg</span></span><br></pre></td></tr></table></figure><h3 id="一行代码评级组件"><a href="#一行代码评级组件" class="headerlink" title="一行代码评级组件"></a>一行代码评级组件</h3><blockquote><p>用法：”★★★★★☆☆☆☆☆”.slice(5 - num, 10 - num);  num的值在1 ~ 5之间</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/一行代码评级组件.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>上面的方法只能实现整数，那如何实现小数评级呢？</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">data-attr</span>=<span class="string">"after"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:after</span>&#123; <span class="attribute">content</span>: <span class="built_in">attr</span>(data-attr); <span class="attribute">color</span>: <span class="number">#0C68F7</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'.after'</span>).attr(<span class="string">'data-attr'</span>,<span class="string">'★★★★☆'</span>)<span class="comment">// 把刚出的字符串动态设置在这里</span></span><br></pre></td></tr></table></figure><p>查看 css ::after (:after) 属性👉🏿：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after" target="_blank" rel="noopener">Web 开发技术CSS（层叠样式表）::after (:after)</a></p><h3 id="统计字符串中相同字符出现的次数"><a href="#统计字符串中相同字符出现的次数" class="headerlink" title="统计字符串中相同字符出现的次数"></a>统计字符串中相同字符出现的次数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'abcdaabc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">p, k</span>) =&gt;</span> (p[k]++ || (p[k] = <span class="number">1</span>), p), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//&#123; a: 3, b: 2, c: 2, d: 1 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="😂立即执行函数的几种写法…"><a href="#😂立即执行函数的几种写法…" class="headerlink" title="😂立即执行函数的几种写法….."></a>😂立即执行函数的几种写法…..</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;() );</span><br><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; )();</span><br><span class="line">[ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;() ];</span><br><span class="line">~ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">! <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">+ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">- <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">delete</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="number">1</span> ^ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="number">1</span> &gt; <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br></pre></td></tr></table></figure><h3 id="DOM调试模式"><a href="#DOM调试模式" class="headerlink" title="DOM调试模式"></a>DOM调试模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[].forEach.call($$(<span class="string">"*"</span>),<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  a.style.outline=<span class="string">"1px solid #"</span>+(~~(<span class="built_in">Math</span>.random()*(<span class="number">1</span>&lt;&lt;<span class="number">24</span>))).toString(<span class="number">16</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想来搞前端也快2年时间来，想起在刚开始写Javascript的时候，总是能遇见一些奇奇怪怪的问题, 和一些让人 WTF的操作，后面越来越深入的了解到这门语言后，一些令人摸不着头脑东西也就明白为什么会这样了,&lt;br&gt;这里也是记录一些好玩好用的JavaScript的片段，也算是
      
    
    </summary>
    
      <category term="代码片段" scheme="https://ImChrisChen.Github.io/categories/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="Javascript" scheme="https://ImChrisChen.Github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Mac下iterm2中sz、rz的安装与使用🐣</title>
    <link href="https://ImChrisChen.Github.io/2020/03/13/Mac%E4%B8%8Biterm2%E4%B8%ADsz%E3%80%81rz%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%F0%9F%90%A3/"/>
    <id>https://ImChrisChen.Github.io/2020/03/13/Mac下iterm2中sz、rz的安装与使用🐣/</id>
    <published>2020-03-13T14:25:14.000Z</published>
    <updated>2021-05-18T15:53:59.385Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装lrzsz（需要装-brewhome-🤏🏻）"><a href="#1-安装lrzsz（需要装-brewhome-🤏🏻）" class="headerlink" title="1. 安装lrzsz（需要装 brewhome 🤏🏻）"></a>1. 安装lrzsz（需要装 brewhome 🤏🏻）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install lrzsz</span><br></pre></td></tr></table></figure><h3 id="2-系统配置"><a href="#2-系统配置" class="headerlink" title="2. 系统配置"></a>2. 系统配置</h3><p><strong>创建文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line">vi iterm2-recv-zmodem.sh</span><br><span class="line"></span><br><span class="line">vi iterm2-send-zmodem.sh</span><br></pre></td></tr></table></figure><p><strong>创建好两个文件后分别添加内容：</strong></p><p>iterm2-recv-zmodem.sh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class="line"><span class="comment"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class="line"><span class="comment"># licensed under cc-wiki with attribution required </span></span><br><span class="line"><span class="comment"># Remainder of script public domain</span></span><br><span class="line"> </span><br><span class="line">osascript -e <span class="string">'tell application "iTerm2" to version'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NAME</span> = <span class="string">"iTerm"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    FILE=`osascript -e <span class="string">'tell application "iTerm" to activate'</span> -e <span class="string">'tell application "iTerm" to set thefile to choose folder with prompt "Choose a folder to place received files in"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    FILE=`osascript -e <span class="string">'tell application "iTerm2" to activate'</span> -e <span class="string">'tell application "iTerm2" to set thefile to choose folder with prompt "Choose a folder to place received files in"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FILE</span> = <span class="string">""</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Cancelled.</span><br><span class="line">    <span class="comment"># Send ZModem cancel</span></span><br><span class="line">    <span class="built_in">echo</span> -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Cancelled transfer</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="string">"<span class="variable">$FILE</span>"</span></span><br><span class="line">    /usr/<span class="built_in">local</span>/bin/rz -E -e -b</span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Sent \-\&gt; $FILE</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>iterm2-send-zmodem.sh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author: Matt Mastracci (matthew@mastracci.com)</span></span><br><span class="line"><span class="comment"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></span><br><span class="line"><span class="comment"># licensed under cc-wiki with attribution required </span></span><br><span class="line"><span class="comment"># Remainder of script public domain</span></span><br><span class="line"> </span><br><span class="line">osascript -e <span class="string">'tell application "iTerm2" to version'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NAME</span> = <span class="string">"iTerm"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    FILE=`osascript -e <span class="string">'tell application "iTerm" to activate'</span> -e <span class="string">'tell application "iTerm" to set thefile to choose file with prompt "Choose a file to send"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    FILE=`osascript -e <span class="string">'tell application "iTerm2" to activate'</span> -e <span class="string">'tell application "iTerm2" to set thefile to choose file with prompt "Choose a file to send"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FILE</span> = <span class="string">""</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Cancelled.</span><br><span class="line">    <span class="comment"># Send ZModem cancel</span></span><br><span class="line">    <span class="built_in">echo</span> -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Cancelled transfer</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    /usr/<span class="built_in">local</span>/bin/sz <span class="string">"<span class="variable">$FILE</span>"</span> -e -b</span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Received $FILE</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>将文件写好后保存好，使用如下命令添加权限</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">777</span> iterm2-*  <span class="comment"># 把以上两个文件都添加权限（这里的*代表正则匹配的规则）</span></span><br></pre></td></tr></table></figure><h3 id="iterm2-设置快捷命令"><a href="#iterm2-设置快捷命令" class="headerlink" title="iterm2 设置快捷命令"></a>iterm2 设置快捷命令</h3><blockquote><p>点击 iTerm2 的设置界面 Perference-&gt; Profiles -&gt; Default -&gt; Advanced -&gt; Triggers 的 Edit 按钮，加入以下配置</p></blockquote><table><thead><tr><th>Regular expression</th><th>Action</th><th>Parameters</th></tr></thead><tbody><tr><td>rz waiting to receive.**B0100</td><td>Run Silent Coprocess</td><td>/usr/local/bin/iterm2-send-zmodem.sh</td></tr><tr><td>**B00000000000000</td><td>Run Silent Coprocess</td><td>/usr/local/bin/iterm2-recv-zmodem.sh</td></tr></tbody></table><p>配置好后如图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/mac-rz-sz-iterm2.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>rz 上传功能 ：在bash中，也就是iTerm2终端输入rz 就会弹出文件选择框，<code>选择文件 choose 就开始上传，会上传到当前目录</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><p>sz 下载功能 ：sz fileName(你要下载的文件的名字) 回车，<code>会弹出窗体 我们选择要保存的地方即可</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sz &lt;filename&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-安装lrzsz（需要装-brewhome-🤏🏻）&quot;&gt;&lt;a href=&quot;#1-安装lrzsz（需要装-brewhome-🤏🏻）&quot; class=&quot;headerlink&quot; title=&quot;1. 安装lrzsz（需要装 brewhome 🤏🏻）&quot;&gt;&lt;/a&gt;1
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://ImChrisChen.Github.io/tags/Mac/"/>
    
      <category term="命令行" scheme="https://ImChrisChen.Github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>微信小游戏提审发布流程</title>
    <link href="https://ImChrisChen.Github.io/2020/03/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E6%8F%90%E5%AE%A1%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B/"/>
    <id>https://ImChrisChen.Github.io/2020/03/11/微信小游戏提审发布流程/</id>
    <published>2020-03-11T07:52:25.000Z</published>
    <updated>2021-06-13T08:59:08.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小游戏提审发布流程"><a href="#微信小游戏提审发布流程" class="headerlink" title="微信小游戏提审发布流程"></a>微信小游戏提审发布流程</h1><h2 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-164111@2x.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="点击上传，覆盖体验版"><a href="#点击上传，覆盖体验版" class="headerlink" title="点击上传，覆盖体验版"></a>点击上传，覆盖体验版</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-164738@2x.png" alt="WX20200206-164738@2x" title>                </div>                <div class="image-caption">WX20200206-164738@2x</div>            </figure><h3 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-164809@2x.png" alt="WX20200206-164809@2x" title>                </div>                <div class="image-caption">WX20200206-164809@2x</div>            </figure><h2 id="等编译好代码，自动上传"><a href="#等编译好代码，自动上传" class="headerlink" title="等编译好代码，自动上传"></a>等编译好代码，自动上传</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-165338@2x.png" alt="WX20200206-165338@2x" title>                </div>                <div class="image-caption">WX20200206-165338@2x</div>            </figure><h2 id="上传成功"><a href="#上传成功" class="headerlink" title="上传成功"></a>上传成功</h2><img src="http://cdn.chrischen.top//Markdown/WX20200206-165638@2x.png" alt="WX20200206-165638@2x"><img src="http://cdn.chrischen.top//Markdown/WX20200206-165648@2x.png" alt="WX20200206-165648@2x"><h2 id="登陆微信公众平台"><a href="#登陆微信公众平台" class="headerlink" title="登陆微信公众平台"></a>登陆微信公众平台</h2><p><a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com/</a></p><p>点击提交审核，然后会出来很多选择框</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-165918@2x.png" alt="WX20200206-165918@2x" title>                </div>                <div class="image-caption">WX20200206-165918@2x</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-170543@2x.png" alt="WX20200206-170543@2x" title>                </div>                <div class="image-caption">WX20200206-170543@2x</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-170553@2x.png" alt="WX20200206-170553@2x" title>                </div>                <div class="image-caption">WX20200206-170553@2x</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-170600@2x.png" alt="WX20200206-170600@2x" title>                </div>                <div class="image-caption">WX20200206-170600@2x</div>            </figure><h3 id="填写游戏内容介绍（首次提审需要）∂"><a href="#填写游戏内容介绍（首次提审需要）∂" class="headerlink" title="填写游戏内容介绍（首次提审需要）∂"></a>填写游戏内容介绍（首次提审需要）∂</h3><blockquote><p>  一些游戏特色，玩法，介绍，游戏背景 等 图文描述</p></blockquote><p>填好提交后，会显示审核中（后来发现不用通过这个审核可以直接提交代码，填写好就可以）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/Lark20200206-170400.png" alt="Lark20200206-170400" title>                </div>                <div class="image-caption">Lark20200206-170400</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/Users/MacBook/Desktop/小游戏提审相关/小游戏提审流程/images/Lark20200206-170756.png" alt="Lark20200206-170756" title>                </div>                <div class="image-caption">Lark20200206-170756</div>            </figure><h2 id="提交审核"><a href="#提交审核" class="headerlink" title="提交审核"></a>提交审核</h2><p>点击提交审核，然后会出来很多选择框</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-170128@2x.png" alt="WX20200206-170128@2x" title>                </div>                <div class="image-caption">WX20200206-170128@2x</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-170031@2x.png" alt="WX20200206-170031@2x" title>                </div>                <div class="image-caption">WX20200206-170031@2x</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/WX20200206-170158@2x.png" alt="WX20200206-170158@2x" title>                </div>                <div class="image-caption">WX20200206-170158@2x</div>            </figure><p>提交成功，正在审核</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn.chrischen.top//Markdown/Lark20200206-171725.png" alt="Lark20200206-171725" title>                </div>                <div class="image-caption">Lark20200206-171725</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信小游戏提审发布流程&quot;&gt;&lt;a href=&quot;#微信小游戏提审发布流程&quot; class=&quot;headerlink&quot; title=&quot;微信小游戏提审发布流程&quot;&gt;&lt;/a&gt;微信小游戏提审发布流程&lt;/h1&gt;&lt;h2 id=&quot;导入项目&quot;&gt;&lt;a href=&quot;#导入项目&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="微信小程序/小游戏" scheme="https://ImChrisChen.Github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
</feed>
